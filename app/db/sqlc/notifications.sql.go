// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: notifications.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAllNotificationsByUser = `-- name: DeleteAllNotificationsByUser :exec
DELETE FROM notifications WHERE username = $1
`

func (q *Queries) DeleteAllNotificationsByUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteAllNotificationsByUser, username)
	return err
}

const deleteNotificationByID = `-- name: DeleteNotificationByID :exec
DELETE FROM notifications
WHERE notificationID = $1
`

func (q *Queries) DeleteNotificationByID(ctx context.Context, notificationid int64) error {
	_, err := q.db.Exec(ctx, deleteNotificationByID, notificationid)
	return err
}

const getNotificationsByUsername = `-- name: GetNotificationsByUsername :many
SELECT notifications.notificationid, notifications.username, notifications.title, notifications.description, notifications.datetime, notifications.is_read
FROM notifications
JOIN users ON notifications.username = users.username
WHERE users.username = $1
ORDER BY notifications.datetime DESC
LIMIT $2 OFFSET $3
`

type GetNotificationsByUsernameParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) GetNotificationsByUsername(ctx context.Context, arg GetNotificationsByUsernameParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotificationsByUsername, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.Notificationid,
			&i.Username,
			&i.Title,
			&i.Description,
			&i.Datetime,
			&i.IsRead,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNotification = `-- name: InsertNotification :one
INSERT INTO notifications (username, title, description,datetime)
VALUES ($1, $2, $3, $4)
RETURNING notificationid, username, title, description, datetime, is_read
`

type InsertNotificationParams struct {
	Username    string           `json:"username"`
	Title       string           `json:"title"`
	Description pgtype.Text      `json:"description"`
	Datetime    pgtype.Timestamp `json:"datetime"`
}

func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, insertNotification,
		arg.Username,
		arg.Title,
		arg.Description,
		arg.Datetime,
	)
	var i Notification
	err := row.Scan(
		&i.Notificationid,
		&i.Username,
		&i.Title,
		&i.Description,
		&i.Datetime,
		&i.IsRead,
	)
	return i, err
}

const isReadNotification = `-- name: IsReadNotification :exec
UPDATE notifications
SET is_read = true
WHERE notificationID = $1
`

func (q *Queries) IsReadNotification(ctx context.Context, notificationid int64) error {
	_, err := q.db.Exec(ctx, isReadNotification, notificationid)
	return err
}
