// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: notifications.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

<<<<<<< HEAD
<<<<<<< HEAD
const createtNotification = `-- name: CreatetNotification :one
INSERT INTO notifications (
    username,
    title,
    content,
    notify_type,
    related_id,
    related_type,
    is_read
) VALUES (
    $1, $2, $3, $4, $5, $6, false
) RETURNING id, username, title, content, is_read, related_id, related_type, datetime, notify_type
`

type CreatetNotificationParams struct {
	Username    string      `json:"username"`
	Title       string      `json:"title"`
	Content     pgtype.Text `json:"content"`
	NotifyType  pgtype.Text `json:"notify_type"`
	RelatedID   pgtype.Int4 `json:"related_id"`
	RelatedType pgtype.Text `json:"related_type"`
}

func (q *Queries) CreatetNotification(ctx context.Context, arg CreatetNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createtNotification,
		arg.Username,
		arg.Title,
		arg.Content,
		arg.NotifyType,
		arg.RelatedID,
		arg.RelatedType,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Title,
		&i.Content,
		&i.IsRead,
		&i.RelatedID,
		&i.RelatedType,
		&i.Datetime,
		&i.NotifyType,
	)
	return i, err
}

const deleteNotificationsByUsername = `-- name: DeleteNotificationsByUsername :exec
DELETE FROM notifications
WHERE username = $1
`

func (q *Queries) DeleteNotificationsByUsername(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteNotificationsByUsername, username)
	return err
}

const listNotificationsByUsername = `-- name: ListNotificationsByUsername :many
SELECT id, username, title, content, is_read, related_id, related_type, datetime, notify_type FROM notifications
WHERE username = $1
LIMIT $2 OFFSET $3
`

type ListNotificationsByUsernameParams struct {
=======
const deleteAllNotifications = `-- name: DeleteAllNotifications :exec
DELETE FROM notifications
=======
const deleteAllNotificationsByUser = `-- name: DeleteAllNotificationsByUser :exec
DELETE FROM notifications WHERE username = $1
>>>>>>> 9fd7fc8 (feat: validate notification schema and APIs)
`

func (q *Queries) DeleteAllNotificationsByUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteAllNotificationsByUser, username)
	return err
}

const deleteNotificationByID = `-- name: DeleteNotificationByID :exec
DELETE FROM notifications
WHERE notificationID = $1
`

func (q *Queries) DeleteNotificationByID(ctx context.Context, notificationid int64) error {
	_, err := q.db.Exec(ctx, deleteNotificationByID, notificationid)
	return err
}

const getNotificationsByUsername = `-- name: GetNotificationsByUsername :many
SELECT notifications.notificationid, notifications.username, notifications.title, notifications.description, notifications.datetime, notifications.is_read
FROM notifications
JOIN users ON notifications.username = users.username
WHERE users.username = $1
ORDER BY notifications.datetime DESC
LIMIT $2 OFFSET $3
`

type GetNotificationsByUsernameParams struct {
>>>>>>> eb8d761 (updated pet schedule)
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

<<<<<<< HEAD
func (q *Queries) ListNotificationsByUsername(ctx context.Context, arg ListNotificationsByUsernameParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, listNotificationsByUsername, arg.Username, arg.Limit, arg.Offset)
=======
func (q *Queries) GetNotificationsByUsername(ctx context.Context, arg GetNotificationsByUsernameParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotificationsByUsername, arg.Username, arg.Limit, arg.Offset)
>>>>>>> eb8d761 (updated pet schedule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
<<<<<<< HEAD
			&i.ID,
			&i.Username,
			&i.Title,
			&i.Content,
			&i.IsRead,
			&i.RelatedID,
			&i.RelatedType,
			&i.Datetime,
			&i.NotifyType,
=======
			&i.Notificationid,
			&i.Username,
			&i.Title,
<<<<<<< HEAD
			&i.Body,
			&i.Duedate,
			&i.Repeatinterval,
			&i.Iscompleted,
			&i.Notificationsent,
>>>>>>> eb8d761 (updated pet schedule)
=======
			&i.Description,
			&i.Datetime,
			&i.IsRead,
>>>>>>> 9fd7fc8 (feat: validate notification schema and APIs)
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

<<<<<<< HEAD
const markNotificationAsRead = `-- name: MarkNotificationAsRead :exec
UPDATE notifications
SET is_read = true
WHERE id = $1
`

func (q *Queries) MarkNotificationAsRead(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, markNotificationAsRead, id)
	return err
=======
const insertNotification = `-- name: InsertNotification :one
INSERT INTO notifications (username, title, description,datetime)
VALUES ($1, $2, $3, $4)
RETURNING notificationid, username, title, description, datetime, is_read
`

type InsertNotificationParams struct {
	Username    string           `json:"username"`
	Title       string           `json:"title"`
	Description pgtype.Text      `json:"description"`
	Datetime    pgtype.Timestamp `json:"datetime"`
}

func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, insertNotification,
		arg.Username,
		arg.Title,
		arg.Description,
		arg.Datetime,
	)
	var i Notification
	err := row.Scan(
		&i.Notificationid,
		&i.Username,
		&i.Title,
		&i.Description,
		&i.Datetime,
		&i.IsRead,
	)
	return i, err
>>>>>>> eb8d761 (updated pet schedule)
}

const isReadNotification = `-- name: IsReadNotification :exec
UPDATE notifications
SET is_read = true
WHERE notificationID = $1
`

func (q *Queries) IsReadNotification(ctx context.Context, notificationid int64) error {
	_, err := q.db.Exec(ctx, isReadNotification, notificationid)
	return err
}
