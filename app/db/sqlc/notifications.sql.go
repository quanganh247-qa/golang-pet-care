// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: notifications.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAllNotifications = `-- name: DeleteAllNotifications :exec
DELETE FROM notifications
`

// Delete all notifications
func (q *Queries) DeleteAllNotifications(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllNotifications)
	return err
}

const getNotificationsByUsername = `-- name: GetNotificationsByUsername :many
SELECT notifications.notificationid, notifications.petid, notifications.title, notifications.body, notifications.duedate, notifications.repeatinterval, notifications.iscompleted, notifications.notificationsent
FROM notifications
JOIN pet ON notifications.petID = pet.petid
JOIN users ON pet.username = users.username
WHERE users.username = $1
ORDER BY notifications.dueDate DESC
LIMIT $2 OFFSET $3
`

type GetNotificationsByUsernameParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) GetNotificationsByUsername(ctx context.Context, arg GetNotificationsByUsernameParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotificationsByUsername, arg.Username, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.Notificationid,
			&i.Petid,
			&i.Title,
			&i.Body,
			&i.Duedate,
			&i.Repeatinterval,
			&i.Iscompleted,
			&i.Notificationsent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNotification = `-- name: InsertNotification :one
INSERT INTO notifications (petID, title, body, dueDate, repeatInterval, isCompleted, notificationSent)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING notificationid, petid, title, body, duedate, repeatinterval, iscompleted, notificationsent
`

type InsertNotificationParams struct {
	Petid            pgtype.Int8      `json:"petid"`
	Title            string           `json:"title"`
	Body             pgtype.Text      `json:"body"`
	Duedate          pgtype.Timestamp `json:"duedate"`
	Repeatinterval   pgtype.Text      `json:"repeatinterval"`
	Iscompleted      pgtype.Bool      `json:"iscompleted"`
	Notificationsent pgtype.Bool      `json:"notificationsent"`
}

// Insert a notification
func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, insertNotification,
		arg.Petid,
		arg.Title,
		arg.Body,
		arg.Duedate,
		arg.Repeatinterval,
		arg.Iscompleted,
		arg.Notificationsent,
	)
	var i Notification
	err := row.Scan(
		&i.Notificationid,
		&i.Petid,
		&i.Title,
		&i.Body,
		&i.Duedate,
		&i.Repeatinterval,
		&i.Iscompleted,
		&i.Notificationsent,
	)
	return i, err
}
