// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: file.sql

package db

import (
	"context"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (
    file_name,
    file_path,
    file_size,
    file_type
) VALUES (
    $1, $2, $3, $4
) RETURNING id, file_name, file_path, file_size, file_type, uploaded_at, user_id
`

type CreateFileParams struct {
	FileName string `json:"file_name"`
	FilePath string `json:"file_path"`
	FileSize int64  `json:"file_size"`
	FileType string `json:"file_type"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, createFile,
		arg.FileName,
		arg.FilePath,
		arg.FileSize,
		arg.FileType,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.FilePath,
		&i.FileSize,
		&i.FileType,
		&i.UploadedAt,
		&i.UserID,
	)
	return i, err
}

const getFileByID = `-- name: GetFileByID :one
SELECT id, file_name, file_path, file_size, file_type, uploaded_at, user_id FROM files WHERE id = $1
`

func (q *Queries) GetFileByID(ctx context.Context, id int64) (File, error) {
	row := q.db.QueryRow(ctx, getFileByID, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.FilePath,
		&i.FileSize,
		&i.FileType,
		&i.UploadedAt,
		&i.UserID,
	)
	return i, err
}

const updateFile = `-- name: UpdateFile :one
UPDATE files SET
    file_name = $2,
    file_path = $3,
    file_size = $4,
    file_type = $5
WHERE id = $1 RETURNING id, file_name, file_path, file_size, file_type, uploaded_at, user_id
`

type UpdateFileParams struct {
	ID       int64  `json:"id"`
	FileName string `json:"file_name"`
	FilePath string `json:"file_path"`
	FileSize int64  `json:"file_size"`
	FileType string `json:"file_type"`
}

func (q *Queries) UpdateFile(ctx context.Context, arg UpdateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, updateFile,
		arg.ID,
		arg.FileName,
		arg.FilePath,
		arg.FileSize,
		arg.FileType,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.FilePath,
		&i.FileSize,
		&i.FileType,
		&i.UploadedAt,
		&i.UserID,
	)
	return i, err
}
