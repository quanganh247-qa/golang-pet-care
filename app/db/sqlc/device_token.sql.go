// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: device_token.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

<<<<<<< HEAD
const deleteDeviceToken = `-- name: DeleteDeviceToken :exec
DELETE FROM device_tokens WHERE username = $1 AND token = $2
`

type DeleteDeviceTokenParams struct {
	Username string `json:"username"`
	Token    string `json:"token"`
}

func (q *Queries) DeleteDeviceToken(ctx context.Context, arg DeleteDeviceTokenParams) error {
	_, err := q.db.Exec(ctx, deleteDeviceToken, arg.Username, arg.Token)
	return err
}

const getDeviceTokenByUsername = `-- name: GetDeviceTokenByUsername :many
SELECT id, username, token, device_type, created_at, last_used_at, expired_at FROM device_tokens WHERE username = $1
`

func (q *Queries) GetDeviceTokenByUsername(ctx context.Context, username string) ([]DeviceToken, error) {
=======
const getDeviceTokenByUsername = `-- name: GetDeviceTokenByUsername :many
SELECT id, username, token, device_type, created_at, last_used_at, expired_at FROM DeviceTokens WHERE username = $1
`

func (q *Queries) GetDeviceTokenByUsername(ctx context.Context, username string) ([]Devicetoken, error) {
>>>>>>> 0fb3f30 (user images)
	rows, err := q.db.Query(ctx, getDeviceTokenByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
<<<<<<< HEAD
	items := []DeviceToken{}
	for rows.Next() {
		var i DeviceToken
=======
	items := []Devicetoken{}
	for rows.Next() {
		var i Devicetoken
>>>>>>> 0fb3f30 (user images)
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Token,
			&i.DeviceType,
			&i.CreatedAt,
			&i.LastUsedAt,
			&i.ExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDeviceToken = `-- name: InsertDeviceToken :one
<<<<<<< HEAD
INSERT INTO device_tokens (
    username, token, device_type, last_used_at, expired_at
) VALUES ($1, $2, $3, $4, $5) RETURNING id, username, token, device_type, created_at, last_used_at, expired_at
=======
INSERT INTO DeviceTokens (
    username,token,device_type,last_used_at,expired_at
)VALUES ($1,$2,$3,$4,$5) RETURNING id, username, token, device_type, created_at, last_used_at, expired_at
>>>>>>> 0fb3f30 (user images)
`

type InsertDeviceTokenParams struct {
	Username   string           `json:"username"`
	Token      string           `json:"token"`
	DeviceType pgtype.Text      `json:"device_type"`
	LastUsedAt pgtype.Timestamp `json:"last_used_at"`
	ExpiredAt  pgtype.Timestamp `json:"expired_at"`
}

<<<<<<< HEAD
func (q *Queries) InsertDeviceToken(ctx context.Context, arg InsertDeviceTokenParams) (DeviceToken, error) {
=======
func (q *Queries) InsertDeviceToken(ctx context.Context, arg InsertDeviceTokenParams) (Devicetoken, error) {
>>>>>>> 0fb3f30 (user images)
	row := q.db.QueryRow(ctx, insertDeviceToken,
		arg.Username,
		arg.Token,
		arg.DeviceType,
		arg.LastUsedAt,
		arg.ExpiredAt,
	)
<<<<<<< HEAD
	var i DeviceToken
=======
	var i Devicetoken
>>>>>>> 0fb3f30 (user images)
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Token,
		&i.DeviceType,
		&i.CreatedAt,
		&i.LastUsedAt,
		&i.ExpiredAt,
	)
	return i, err
}
