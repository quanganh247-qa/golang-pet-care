// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: cart.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addItemToCart = `-- name: AddItemToCart :exec
WITH product_check AS (
    SELECT id FROM CartItem 
    WHERE CartItem.cart_id = $1 AND CartItem.product_id = $2
)
UPDATE CartItem
SET quantity = CartItem.quantity + $3
WHERE CartItem.cart_id = $1 AND CartItem.product_id = $2
RETURNING id, cart_id, product_id, quantity, unit_price, total_price
`

type AddItemToCartParams struct {
	CartID    int64       `json:"cart_id"`
	ProductID int64       `json:"product_id"`
	Quantity  pgtype.Int4 `json:"quantity"`
}

func (q *Queries) AddItemToCart(ctx context.Context, arg AddItemToCartParams) error {
	_, err := q.db.Exec(ctx, addItemToCart, arg.CartID, arg.ProductID, arg.Quantity)
	return err
}

const createCartForUser = `-- name: CreateCartForUser :one
INSERT INTO Cart (user_id)
VALUES ($1)
RETURNING id AS cart_id
`

func (q *Queries) CreateCartForUser(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, createCartForUser, userID)
	var cart_id int64
	err := row.Scan(&cart_id)
	return cart_id, err
}

const getCartByUserId = `-- name: GetCartByUserId :many
SELECT id, user_id, created_at, updated_at 
FROM Cart
WHERE user_id = $1
`

func (q *Queries) GetCartByUserId(ctx context.Context, userID int64) ([]Cart, error) {
	rows, err := q.db.Query(ctx, getCartByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cart{}
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
