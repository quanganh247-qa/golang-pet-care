// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: pet_weight.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addPetWeightRecord = `-- name: AddPetWeightRecord :one
INSERT INTO pet_weight_history (
    pet_id,
    weight_kg,
    notes
) VALUES (
    $1, $2, $3
) RETURNING id, pet_id, weight_kg, recorded_at, notes, created_at
`

type AddPetWeightRecordParams struct {
	PetID    int64       `json:"pet_id"`
	WeightKg float64     `json:"weight_kg"`
	Notes    pgtype.Text `json:"notes"`
}

func (q *Queries) AddPetWeightRecord(ctx context.Context, arg AddPetWeightRecordParams) (PetWeightHistory, error) {
	row := q.db.QueryRow(ctx, addPetWeightRecord, arg.PetID, arg.WeightKg, arg.Notes)
	var i PetWeightHistory
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.WeightKg,
		&i.RecordedAt,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const countPetWeightRecords = `-- name: CountPetWeightRecords :one
SELECT COUNT(*) FROM pet_weight_history
WHERE pet_id = $1
`

func (q *Queries) CountPetWeightRecords(ctx context.Context, petID int64) (int64, error) {
	row := q.db.QueryRow(ctx, countPetWeightRecords, petID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deletePetWeightRecord = `-- name: DeletePetWeightRecord :exec
DELETE FROM pet_weight_history
WHERE id = $1 AND pet_id = $2
`

type DeletePetWeightRecordParams struct {
	ID    int64 `json:"id"`
	PetID int64 `json:"pet_id"`
}

func (q *Queries) DeletePetWeightRecord(ctx context.Context, arg DeletePetWeightRecordParams) error {
	_, err := q.db.Exec(ctx, deletePetWeightRecord, arg.ID, arg.PetID)
	return err
}

const getLatestPetWeight = `-- name: GetLatestPetWeight :one
SELECT id, pet_id, weight_kg, recorded_at, notes, created_at FROM pet_weight_history
WHERE pet_id = $1
ORDER BY recorded_at DESC
LIMIT 1
`

func (q *Queries) GetLatestPetWeight(ctx context.Context, petID int64) (PetWeightHistory, error) {
	row := q.db.QueryRow(ctx, getLatestPetWeight, petID)
	var i PetWeightHistory
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.WeightKg,
		&i.RecordedAt,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const getPetWeightHistory = `-- name: GetPetWeightHistory :many
SELECT id, pet_id, weight_kg, recorded_at, notes, created_at FROM pet_weight_history
WHERE pet_id = $1
ORDER BY recorded_at DESC
LIMIT $2 OFFSET $3
`

type GetPetWeightHistoryParams struct {
	PetID  int64 `json:"pet_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPetWeightHistory(ctx context.Context, arg GetPetWeightHistoryParams) ([]PetWeightHistory, error) {
	rows, err := q.db.Query(ctx, getPetWeightHistory, arg.PetID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PetWeightHistory{}
	for rows.Next() {
		var i PetWeightHistory
		if err := rows.Scan(
			&i.ID,
			&i.PetID,
			&i.WeightKg,
			&i.RecordedAt,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePetCurrentWeight = `-- name: UpdatePetCurrentWeight :exec
UPDATE pets
SET weight = $2, updated_at = NOW()
WHERE petid = $1
`

type UpdatePetCurrentWeightParams struct {
	Petid  int64         `json:"petid"`
	Weight pgtype.Float8 `json:"weight"`
}

func (q *Queries) UpdatePetCurrentWeight(ctx context.Context, arg UpdatePetCurrentWeightParams) error {
	_, err := q.db.Exec(ctx, updatePetCurrentWeight, arg.Petid, arg.Weight)
	return err
}
