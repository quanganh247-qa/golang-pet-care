// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: allertries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPetAllergy = `-- name: CreatePetAllergy :one
INSERT INTO pet_allergies (
    pet_id,
    type,
    detail
) VALUES (
    $1, $2, $3
) RETURNING id, pet_id, type, detail
`

type CreatePetAllergyParams struct {
	PetID  pgtype.Int8 `json:"pet_id"`
	Type   pgtype.Text `json:"type"`
	Detail pgtype.Text `json:"detail"`
}

func (q *Queries) CreatePetAllergy(ctx context.Context, arg CreatePetAllergyParams) (PetAllergy, error) {
	row := q.db.QueryRow(ctx, createPetAllergy, arg.PetID, arg.Type, arg.Detail)
	var i PetAllergy
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.Type,
		&i.Detail,
	)
	return i, err
}

const deletePetAllergy = `-- name: DeletePetAllergy :exec
DELETE FROM pet_allergies
WHERE id = $1
`

func (q *Queries) DeletePetAllergy(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePetAllergy, id)
	return err
}

const getPetAllergy = `-- name: GetPetAllergy :one
SELECT id, pet_id, type, detail FROM pet_allergies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPetAllergy(ctx context.Context, id int64) (PetAllergy, error) {
	row := q.db.QueryRow(ctx, getPetAllergy, id)
	var i PetAllergy
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.Type,
		&i.Detail,
	)
	return i, err
}

const listPetAllergies = `-- name: ListPetAllergies :many
SELECT id, pet_id, type, detail FROM pet_allergies
WHERE pet_id = $1 LIMIT $2 OFFSET $3
`

type ListPetAllergiesParams struct {
	PetID  pgtype.Int8 `json:"pet_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListPetAllergies(ctx context.Context, arg ListPetAllergiesParams) ([]PetAllergy, error) {
	rows, err := q.db.Query(ctx, listPetAllergies, arg.PetID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PetAllergy{}
	for rows.Next() {
		var i PetAllergy
		if err := rows.Scan(
			&i.ID,
			&i.PetID,
			&i.Type,
			&i.Detail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePetAllergy = `-- name: UpdatePetAllergy :one
UPDATE pet_allergies
SET type = $2,
    detail = $3
WHERE id = $1
RETURNING id, pet_id, type, detail
`

type UpdatePetAllergyParams struct {
	ID     int64       `json:"id"`
	Type   pgtype.Text `json:"type"`
	Detail pgtype.Text `json:"detail"`
}

func (q *Queries) UpdatePetAllergy(ctx context.Context, arg UpdatePetAllergyParams) (PetAllergy, error) {
	row := q.db.QueryRow(ctx, updatePetAllergy, arg.ID, arg.Type, arg.Detail)
	var i PetAllergy
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.Type,
		&i.Detail,
	)
	return i, err
}
