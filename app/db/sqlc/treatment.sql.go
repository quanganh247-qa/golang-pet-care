// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: treatment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
const assignCarprofenToInitialPhase = `-- name: AssignCarprofenToInitialPhase :exec
INSERT INTO phase_medicines (phase_id, medicine_id, dosage, frequency, duration, notes)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING phase_id, medicine_id, dosage, frequency, duration, notes, created_at, quantity, is_received
<<<<<<< HEAD
=======
const assignCarprofenToInitialPhase = `-- name: AssignCarprofenToInitialPhase :exec
INSERT INTO phase_medicines (phase_id, medicine_id, dosage, frequency, duration, notes)
<<<<<<< HEAD
VALUES ($1, $2, $3, $4, $5, $6) RETURNING phase_id, medicine_id, dosage, frequency, duration, notes, created_at
>>>>>>> 2fe5baf (treatment phase)
=======
VALUES ($1, $2, $3, $4, $5, $6) RETURNING phase_id, medicine_id, dosage, frequency, duration, notes, quantity, is_received, created_at
>>>>>>> e859654 (Elastic search)
=======
>>>>>>> ada3717 (Docker file)
=======
const assignCarprofenToInitialPhase = `-- name: AssignCarprofenToInitialPhase :exec
INSERT INTO phase_medicines (phase_id, medicine_id, dosage, frequency, duration, notes)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING phase_id, medicine_id, dosage, frequency, duration, notes, created_at
>>>>>>> 2fe5baf (treatment phase)
`

type AssignCarprofenToInitialPhaseParams struct {
	PhaseID    int64       `json:"phase_id"`
	MedicineID int64       `json:"medicine_id"`
	Dosage     pgtype.Text `json:"dosage"`
	Frequency  pgtype.Text `json:"frequency"`
	Duration   pgtype.Text `json:"duration"`
	Notes      pgtype.Text `json:"notes"`
}

// Assign Carprofen to the Initial Phase
func (q *Queries) AssignCarprofenToInitialPhase(ctx context.Context, arg AssignCarprofenToInitialPhaseParams) error {
	_, err := q.db.Exec(ctx, assignCarprofenToInitialPhase,
		arg.PhaseID,
		arg.MedicineID,
		arg.Dosage,
		arg.Frequency,
		arg.Duration,
		arg.Notes,
	)
	return err
}

<<<<<<< HEAD
<<<<<<< HEAD
const assignMedicationToTreatmentPhase = `-- name: AssignMedicationToTreatmentPhase :one
INSERT INTO phase_medicines (phase_id, medicine_id, dosage, frequency, duration, notes, quantity, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, now()) RETURNING phase_id, medicine_id, dosage, frequency, duration, notes, created_at, quantity, is_received
<<<<<<< HEAD
=======
const assignMedicationToTreatmentPhase = `-- name: AssignMedicationToTreatmentPhase :one
INSERT INTO phase_medicines (phase_id, medicine_id, dosage, frequency, duration, notes, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, now(), now()) RETURNING phase_id, medicine_id, dosage, frequency, duration, notes
>>>>>>> 3bf345d (happy new year)
=======
const assignMedicationToTreatmentPhase = `-- name: AssignMedicationToTreatmentPhase :one
<<<<<<< HEAD
INSERT INTO phase_medicines (phase_id, medicine_id, dosage, frequency, duration, notes, created_at)
VALUES ($1, $2, $3, $4, $5, $6, now()) RETURNING phase_id, medicine_id, dosage, frequency, duration, notes, created_at
>>>>>>> 2fe5baf (treatment phase)
=======
INSERT INTO phase_medicines (phase_id, medicine_id, dosage, frequency, duration, notes, quantity, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, now()) RETURNING phase_id, medicine_id, dosage, frequency, duration, notes, quantity, is_received, created_at
>>>>>>> e859654 (Elastic search)
=======
>>>>>>> ada3717 (Docker file)
=======
const assignMedicationToTreatmentPhase = `-- name: AssignMedicationToTreatmentPhase :one
INSERT INTO phase_medicines (phase_id, medicine_id, dosage, frequency, duration, notes, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, now(), now()) RETURNING phase_id, medicine_id, dosage, frequency, duration, notes
>>>>>>> 3bf345d (happy new year)
=======
const assignMedicationToTreatmentPhase = `-- name: AssignMedicationToTreatmentPhase :one
INSERT INTO phase_medicines (phase_id, medicine_id, dosage, frequency, duration, notes, created_at)
VALUES ($1, $2, $3, $4, $5, $6, now()) RETURNING phase_id, medicine_id, dosage, frequency, duration, notes, created_at
>>>>>>> 2fe5baf (treatment phase)
`

type AssignMedicationToTreatmentPhaseParams struct {
	PhaseID    int64       `json:"phase_id"`
	MedicineID int64       `json:"medicine_id"`
	Dosage     pgtype.Text `json:"dosage"`
	Frequency  pgtype.Text `json:"frequency"`
	Duration   pgtype.Text `json:"duration"`
	Notes      pgtype.Text `json:"notes"`
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	Quantity   pgtype.Int4 `json:"quantity"`
=======
>>>>>>> 3bf345d (happy new year)
=======
	Quantity   pgtype.Int4 `json:"quantity"`
>>>>>>> e859654 (Elastic search)
=======
>>>>>>> 3bf345d (happy new year)
}

func (q *Queries) AssignMedicationToTreatmentPhase(ctx context.Context, arg AssignMedicationToTreatmentPhaseParams) (PhaseMedicine, error) {
	row := q.db.QueryRow(ctx, assignMedicationToTreatmentPhase,
		arg.PhaseID,
		arg.MedicineID,
		arg.Dosage,
		arg.Frequency,
		arg.Duration,
		arg.Notes,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
		arg.Quantity,
=======
>>>>>>> 3bf345d (happy new year)
=======
		arg.Quantity,
>>>>>>> e859654 (Elastic search)
=======
>>>>>>> 3bf345d (happy new year)
	)
	var i PhaseMedicine
	err := row.Scan(
		&i.PhaseID,
		&i.MedicineID,
		&i.Dosage,
		&i.Frequency,
		&i.Duration,
		&i.Notes,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
		&i.Quantity,
		&i.IsReceived,
>>>>>>> e859654 (Elastic search)
		&i.CreatedAt,
		&i.Quantity,
		&i.IsReceived,
=======
>>>>>>> 3bf345d (happy new year)
=======
		&i.CreatedAt,
>>>>>>> 2fe5baf (treatment phase)
=======
		&i.CreatedAt,
		&i.Quantity,
		&i.IsReceived,
>>>>>>> ada3717 (Docker file)
=======
>>>>>>> 3bf345d (happy new year)
=======
		&i.CreatedAt,
>>>>>>> 2fe5baf (treatment phase)
	)
	return i, err
}

const createTreatment = `-- name: CreateTreatment :one
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
INSERT INTO pet_treatments (pet_id, disease_id,doctor_id, name, type, start_date, end_date ,status, description, created_at)
VALUES ($1, $2, $3, $4, $5, $6 ,$7 , "In Progress", $8, now()) RETURNING id, pet_id, disease_id, start_date, end_date, status, name, type, description, created_at, doctor_id
`

type CreateTreatmentParams struct {
	PetID       pgtype.Int8 `json:"pet_id"`
	DiseaseID   pgtype.Int8 `json:"disease_id"`
	DoctorID    pgtype.Int4 `json:"doctor_id"`
	Name        pgtype.Text `json:"name"`
	Type        pgtype.Text `json:"type"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	Description pgtype.Text `json:"description"`
=======
INSERT INTO pet_treatments (pet_id, disease_id, start_date, end_date, status, notes, created_at)
VALUES ($1, $2, $3, $4, $5, $6, now()) RETURNING id, pet_id, disease_id, start_date, end_date, status, notes, created_at, doctor_id
=======
INSERT INTO pet_treatments (pet_id, disease_id, name, type, start_date, end_date ,status, notes, created_at)
VALUES ($1, $2, $3, $4, $5, $6 , "In Progress", $7, now()) RETURNING id, pet_id, disease_id, start_date, end_date, status, name, type, notes, created_at, doctor_id
>>>>>>> c8bec46 (feat: add chatbot, room management, and pet allergy features)
=======
INSERT INTO pet_treatments (pet_id, disease_id, start_date, end_date, status, notes, created_at)
VALUES ($1, $2, $3, $4, $5, $6, now()) RETURNING id, pet_id, disease_id, start_date, end_date, status, notes, created_at
>>>>>>> 3bf345d (happy new year)
`

type CreateTreatmentParams struct {
	PetID     pgtype.Int8 `json:"pet_id"`
	DiseaseID pgtype.Int8 `json:"disease_id"`
<<<<<<< HEAD
	Name      pgtype.Text `json:"name"`
	Type      pgtype.Text `json:"type"`
	StartDate pgtype.Date `json:"start_date"`
	EndDate   pgtype.Date `json:"end_date"`
	Notes     pgtype.Text `json:"notes"`
>>>>>>> 3bf345d (happy new year)
=======
INSERT INTO pet_treatments (pet_id, disease_id,doctor_id, name, type, start_date, end_date ,status, description, created_at)
VALUES ($1, $2, $3, $4, $5, $6 ,$7 , "In Progress", $8, now()) RETURNING id, pet_id, disease_id, start_date, end_date, status, name, type, description, created_at, doctor_id
`

type CreateTreatmentParams struct {
	PetID       pgtype.Int8 `json:"pet_id"`
	DiseaseID   pgtype.Int8 `json:"disease_id"`
	DoctorID    pgtype.Int4 `json:"doctor_id"`
	Name        pgtype.Text `json:"name"`
	Type        pgtype.Text `json:"type"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	Description pgtype.Text `json:"description"`
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
=======
	StartDate pgtype.Date `json:"start_date"`
	EndDate   pgtype.Date `json:"end_date"`
	Status    pgtype.Text `json:"status"`
	Notes     pgtype.Text `json:"notes"`
>>>>>>> 3bf345d (happy new year)
}

func (q *Queries) CreateTreatment(ctx context.Context, arg CreateTreatmentParams) (PetTreatment, error) {
	row := q.db.QueryRow(ctx, createTreatment,
		arg.PetID,
		arg.DiseaseID,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
		arg.DoctorID,
		arg.Name,
		arg.Type,
		arg.StartDate,
		arg.EndDate,
		arg.Description,
<<<<<<< HEAD
=======
=======
		arg.Name,
		arg.Type,
>>>>>>> c8bec46 (feat: add chatbot, room management, and pet allergy features)
		arg.StartDate,
		arg.EndDate,
		arg.Notes,
>>>>>>> 3bf345d (happy new year)
=======
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
=======
		arg.StartDate,
		arg.EndDate,
		arg.Status,
		arg.Notes,
>>>>>>> 3bf345d (happy new year)
	)
	var i PetTreatment
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.DiseaseID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
		&i.Name,
		&i.Type,
		&i.Description,
=======
		&i.Name,
		&i.Type,
<<<<<<< HEAD
		&i.Notes,
>>>>>>> c8bec46 (feat: add chatbot, room management, and pet allergy features)
=======
		&i.Description,
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
		&i.CreatedAt,
		&i.DoctorID,
=======
		&i.Notes,
		&i.CreatedAt,
<<<<<<< HEAD
>>>>>>> 3bf345d (happy new year)
=======
		&i.DoctorID,
>>>>>>> ada3717 (Docker file)
=======
		&i.Notes,
		&i.CreatedAt,
>>>>>>> 3bf345d (happy new year)
	)
	return i, err
}

const createTreatmentPhase = `-- name: CreateTreatmentPhase :one
INSERT INTO treatment_phases (treatment_id, phase_name, description, start_date, status, created_at)
VALUES ($1, $2, $3, $4, $5, now()) RETURNING id, treatment_id, phase_name, description, status, start_date, created_at
`

type CreateTreatmentPhaseParams struct {
	TreatmentID pgtype.Int8 `json:"treatment_id"`
	PhaseName   pgtype.Text `json:"phase_name"`
	Description pgtype.Text `json:"description"`
	StartDate   pgtype.Date `json:"start_date"`
	Status      pgtype.Text `json:"status"`
}

func (q *Queries) CreateTreatmentPhase(ctx context.Context, arg CreateTreatmentPhaseParams) (TreatmentPhase, error) {
	row := q.db.QueryRow(ctx, createTreatmentPhase,
		arg.TreatmentID,
		arg.PhaseName,
		arg.Description,
		arg.StartDate,
		arg.Status,
	)
	var i TreatmentPhase
	err := row.Scan(
		&i.ID,
		&i.TreatmentID,
		&i.PhaseName,
		&i.Description,
		&i.Status,
		&i.StartDate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTreatment = `-- name: DeleteTreatment :exec
DELETE FROM pet_treatments
WHERE id = $1
`

func (q *Queries) DeleteTreatment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTreatment, id)
	return err
}

const deleteTreatmentPhase = `-- name: DeleteTreatmentPhase :exec
DELETE FROM treatment_phases
WHERE id = $1
`

func (q *Queries) DeleteTreatmentPhase(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTreatmentPhase, id)
	return err
}

const getActiveTreatments = `-- name: GetActiveTreatments :many
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 33fcf96 (Big update)
SELECT t.id, pets.name AS pet_name, d.name AS disease, t.start_date, t.end_date, t.status
FROM pet_treatments t
JOIN pets ON t.pet_id = pets.petid
JOIN diseases d ON t.disease_id = d.id
WHERE t.status = 'ongoing' AND pets.petid = $1 LIMIT $2 OFFSET $3
`

type GetActiveTreatmentsParams struct {
	Petid  int64 `json:"petid"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

=======
=======
>>>>>>> 3bf345d (happy new year)
SELECT t.id, p.name AS pet_name, d.name AS disease, t.start_date, t.end_date, t.status
FROM pet_treatments t
JOIN pet p ON t.pet_id = p.petid
JOIN diseases d ON t.disease_id = d.id
<<<<<<< HEAD
<<<<<<< HEAD
WHERE t.status = 'ongoing' AND p.petid = $1 LIMIT $2 OFFSET $3
`

<<<<<<< HEAD
>>>>>>> 3bf345d (happy new year)
=======
type GetActiveTreatmentsParams struct {
	Petid  int64 `json:"petid"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

>>>>>>> 883d5b3 (update treatment)
=======
WHERE t.status = 'ongoing' AND p.petid
`

>>>>>>> 3bf345d (happy new year)
=======
WHERE t.status = 'ongoing' AND p.petid = $1 LIMIT $2 OFFSET $3
`

type GetActiveTreatmentsParams struct {
	Petid  int64 `json:"petid"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

>>>>>>> 883d5b3 (update treatment)
type GetActiveTreatmentsRow struct {
	ID        int64       `json:"id"`
	PetName   string      `json:"pet_name"`
	Disease   string      `json:"disease"`
	StartDate pgtype.Date `json:"start_date"`
	EndDate   pgtype.Date `json:"end_date"`
	Status    pgtype.Text `json:"status"`
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> e859654 (Elastic search)
func (q *Queries) GetActiveTreatments(ctx context.Context, arg GetActiveTreatmentsParams) ([]GetActiveTreatmentsRow, error) {
	rows, err := q.db.Query(ctx, getActiveTreatments, arg.Petid, arg.Limit, arg.Offset)
=======
// Get All Active Treatments
<<<<<<< HEAD
func (q *Queries) GetActiveTreatments(ctx context.Context) ([]GetActiveTreatmentsRow, error) {
	rows, err := q.db.Query(ctx, getActiveTreatments)
>>>>>>> 3bf345d (happy new year)
=======
func (q *Queries) GetActiveTreatments(ctx context.Context, arg GetActiveTreatmentsParams) ([]GetActiveTreatmentsRow, error) {
	rows, err := q.db.Query(ctx, getActiveTreatments, arg.Petid, arg.Limit, arg.Offset)
>>>>>>> 883d5b3 (update treatment)
=======
// Get All Active Treatments
<<<<<<< HEAD
func (q *Queries) GetActiveTreatments(ctx context.Context) ([]GetActiveTreatmentsRow, error) {
	rows, err := q.db.Query(ctx, getActiveTreatments)
>>>>>>> 3bf345d (happy new year)
=======
func (q *Queries) GetActiveTreatments(ctx context.Context, arg GetActiveTreatmentsParams) ([]GetActiveTreatmentsRow, error) {
	rows, err := q.db.Query(ctx, getActiveTreatments, arg.Petid, arg.Limit, arg.Offset)
>>>>>>> 883d5b3 (update treatment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetActiveTreatmentsRow{}
	for rows.Next() {
		var i GetActiveTreatmentsRow
		if err := rows.Scan(
			&i.ID,
			&i.PetName,
			&i.Disease,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
const getAllTreatmentPhasesByTreatmentID = `-- name: GetAllTreatmentPhasesByTreatmentID :many
SELECT id, treatment_id, phase_name, description, status, start_date, created_at FROM treatment_phases
WHERE treatment_id = $1
`

func (q *Queries) GetAllTreatmentPhasesByTreatmentID(ctx context.Context, treatmentID pgtype.Int8) ([]TreatmentPhase, error) {
	rows, err := q.db.Query(ctx, getAllTreatmentPhasesByTreatmentID, treatmentID)
<<<<<<< HEAD
=======
=======
=======
=======
const getMedicationsByPhase = `-- name: GetMedicationsByPhase :many
SELECT m.id, m.name, pm.dosage, pm.frequency, pm.duration, pm.notes ,pm.Created_at
FROM medicines m
JOIN phase_medicines pm ON m.id = pm.medicine_id
WHERE pm.phase_id = $1 LIMIT $2 OFFSET $3
`

type GetMedicationsByPhaseParams struct {
	PhaseID int64 `json:"phase_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type GetMedicationsByPhaseRow struct {
	ID        int64              `json:"id"`
	Name      string             `json:"name"`
	Dosage    pgtype.Text        `json:"dosage"`
	Frequency pgtype.Text        `json:"frequency"`
	Duration  pgtype.Text        `json:"duration"`
	Notes     pgtype.Text        `json:"notes"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

// Get Medications for a Treatment Phase
func (q *Queries) GetMedicationsByPhase(ctx context.Context, arg GetMedicationsByPhaseParams) ([]GetMedicationsByPhaseRow, error) {
	rows, err := q.db.Query(ctx, getMedicationsByPhase, arg.PhaseID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMedicationsByPhaseRow{}
	for rows.Next() {
		var i GetMedicationsByPhaseRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dosage,
			&i.Frequency,
			&i.Duration,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTreatment = `-- name: GetTreatment :one
SELECT id, pet_id, disease_id, start_date, end_date, status, notes, created_at FROM pet_treatments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTreatment(ctx context.Context, id int64) (PetTreatment, error) {
	row := q.db.QueryRow(ctx, getTreatment, id)
	var i PetTreatment
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.DiseaseID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const getTreatmentPhase = `-- name: GetTreatmentPhase :one
SELECT id, treatment_id, phase_name, description, status, start_date, created_at FROM treatment_phases
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTreatmentPhase(ctx context.Context, id int64) (TreatmentPhase, error) {
	row := q.db.QueryRow(ctx, getTreatmentPhase, id)
	var i TreatmentPhase
	err := row.Scan(
		&i.ID,
		&i.TreatmentID,
		&i.PhaseName,
		&i.Description,
		&i.Status,
		&i.StartDate,
		&i.CreatedAt,
	)
	return i, err
}

const getTreatmentPhasesByTreatment = `-- name: GetTreatmentPhasesByTreatment :many
SELECT tp.id, treatment_id, phase_name, description, tp.status, tp.start_date, tp.created_at, t.id, pet_id, disease_id, t.start_date, end_date, t.status, notes, t.created_at  FROM treatment_phases as tp
JOIN pet_treatments t ON t.id = tp.treatment_id
WHERE t.id = $1 LIMIT $2 OFFSET $3
`

type GetTreatmentPhasesByTreatmentParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetTreatmentPhasesByTreatmentRow struct {
	ID          int64              `json:"id"`
	TreatmentID pgtype.Int8        `json:"treatment_id"`
	PhaseName   pgtype.Text        `json:"phase_name"`
	Description pgtype.Text        `json:"description"`
	Status      pgtype.Text        `json:"status"`
	StartDate   pgtype.Date        `json:"start_date"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	ID_2        int64              `json:"id_2"`
	PetID       pgtype.Int8        `json:"pet_id"`
	DiseaseID   pgtype.Int8        `json:"disease_id"`
	StartDate_2 pgtype.Date        `json:"start_date_2"`
	EndDate     pgtype.Date        `json:"end_date"`
	Status_2    pgtype.Text        `json:"status_2"`
	Notes       pgtype.Text        `json:"notes"`
	CreatedAt_2 pgtype.Timestamptz `json:"created_at_2"`
}

// Get Treatment Phases for a Treatment
<<<<<<< HEAD
func (q *Queries) GetTreatmentPhasesByTreatment(ctx context.Context, id int64) ([]TreatmentPhase, error) {
	rows, err := q.db.Query(ctx, getTreatmentPhasesByTreatment, id)
>>>>>>> 3bf345d (happy new year)
=======
func (q *Queries) GetTreatmentPhasesByTreatment(ctx context.Context, arg GetTreatmentPhasesByTreatmentParams) ([]GetTreatmentPhasesByTreatmentRow, error) {
	rows, err := q.db.Query(ctx, getTreatmentPhasesByTreatment, arg.ID, arg.Limit, arg.Offset)
>>>>>>> 2fe5baf (treatment phase)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTreatmentPhasesByTreatmentRow{}
	for rows.Next() {
		var i GetTreatmentPhasesByTreatmentRow
		if err := rows.Scan(
			&i.ID,
			&i.TreatmentID,
			&i.PhaseName,
			&i.Description,
			&i.Status,
			&i.StartDate,
			&i.CreatedAt,
			&i.ID_2,
			&i.PetID,
			&i.DiseaseID,
			&i.StartDate_2,
			&i.EndDate,
			&i.Status_2,
			&i.Notes,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

<<<<<<< HEAD
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
const getClinicInfo = `-- name: GetClinicInfo :one
SELECT 
    name, 
    address, 
    phone 
FROM clinics 
WHERE id = $1
`

type GetClinicInfoRow struct {
	Name    pgtype.Text `json:"name"`
	Address pgtype.Text `json:"address"`
	Phone   pgtype.Text `json:"phone"`
}

func (q *Queries) GetClinicInfo(ctx context.Context, id int64) (GetClinicInfoRow, error) {
	row := q.db.QueryRow(ctx, getClinicInfo, id)
	var i GetClinicInfoRow
	err := row.Scan(&i.Name, &i.Address, &i.Phone)
	return i, err
}

>>>>>>> ada3717 (Docker file)
const getMedicationsByPhase = `-- name: GetMedicationsByPhase :many
SELECT m.id, m.name, pm.dosage, pm.frequency, pm.duration, pm.notes ,pm.Created_at
FROM medicines m
JOIN phase_medicines pm ON m.id = pm.medicine_id
WHERE pm.phase_id = $1
`

type GetMedicationsByPhaseRow struct {
	ID        int64              `json:"id"`
	Name      string             `json:"name"`
	Dosage    pgtype.Text        `json:"dosage"`
	Frequency pgtype.Text        `json:"frequency"`
	Duration  pgtype.Text        `json:"duration"`
	Notes     pgtype.Text        `json:"notes"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetMedicationsByPhase(ctx context.Context, phaseID int64) ([]GetMedicationsByPhaseRow, error) {
	rows, err := q.db.Query(ctx, getMedicationsByPhase, phaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMedicationsByPhaseRow{}
	for rows.Next() {
		var i GetMedicationsByPhaseRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dosage,
			&i.Frequency,
			&i.Duration,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMedicineByTreatmentID = `-- name: GetMedicineByTreatmentID :many
SELECT pm.medicine_id, pm.dosage, pm.frequency, pm.duration, pm.quantity, pm.notes, pm.is_received
FROM phase_medicines pm
JOIN treatment_phases tp ON pm.phase_id = tp.id
WHERE tp.treatment_id = $1
`

type GetMedicineByTreatmentIDRow struct {
	MedicineID int64       `json:"medicine_id"`
	Dosage     pgtype.Text `json:"dosage"`
	Frequency  pgtype.Text `json:"frequency"`
	Duration   pgtype.Text `json:"duration"`
	Quantity   pgtype.Int4 `json:"quantity"`
	Notes      pgtype.Text `json:"notes"`
	IsReceived pgtype.Bool `json:"is_received"`
}

func (q *Queries) GetMedicineByTreatmentID(ctx context.Context, treatmentID pgtype.Int8) ([]GetMedicineByTreatmentIDRow, error) {
	rows, err := q.db.Query(ctx, getMedicineByTreatmentID, treatmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMedicineByTreatmentIDRow{}
	for rows.Next() {
		var i GetMedicineByTreatmentIDRow
		if err := rows.Scan(
			&i.MedicineID,
			&i.Dosage,
			&i.Frequency,
			&i.Duration,
			&i.Quantity,
			&i.Notes,
			&i.IsReceived,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTreatment = `-- name: GetTreatment :one
SELECT id, pet_id, disease_id, start_date, end_date, status, name, type, description, created_at, doctor_id FROM pet_treatments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTreatment(ctx context.Context, id int64) (PetTreatment, error) {
	row := q.db.QueryRow(ctx, getTreatment, id)
	var i PetTreatment
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.DiseaseID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.Name,
		&i.Type,
		&i.Description,
		&i.CreatedAt,
		&i.DoctorID,
	)
	return i, err
}

const getTreatmentPhase = `-- name: GetTreatmentPhase :one
SELECT id, treatment_id, phase_name, description, status, start_date, created_at FROM treatment_phases
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTreatmentPhase(ctx context.Context, id int64) (TreatmentPhase, error) {
	row := q.db.QueryRow(ctx, getTreatmentPhase, id)
	var i TreatmentPhase
	err := row.Scan(
		&i.ID,
		&i.TreatmentID,
		&i.PhaseName,
		&i.Description,
		&i.Status,
		&i.StartDate,
		&i.CreatedAt,
	)
	return i, err
}

const getTreatmentPhasesByTreatment = `-- name: GetTreatmentPhasesByTreatment :many
SELECT tp.id, treatment_id, phase_name, tp.description, tp.status, tp.start_date, tp.created_at, t.id, pet_id, disease_id, t.start_date, end_date, t.status, name, type, t.description, t.created_at, doctor_id  FROM treatment_phases as tp
JOIN pet_treatments t ON t.id = tp.treatment_id
WHERE t.id = $1 LIMIT $2 OFFSET $3
`

type GetTreatmentPhasesByTreatmentParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetTreatmentPhasesByTreatmentRow struct {
	ID            int64              `json:"id"`
	TreatmentID   pgtype.Int8        `json:"treatment_id"`
	PhaseName     pgtype.Text        `json:"phase_name"`
	Description   pgtype.Text        `json:"description"`
	Status        pgtype.Text        `json:"status"`
	StartDate     pgtype.Date        `json:"start_date"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	ID_2          int64              `json:"id_2"`
	PetID         pgtype.Int8        `json:"pet_id"`
	DiseaseID     pgtype.Int8        `json:"disease_id"`
	StartDate_2   pgtype.Date        `json:"start_date_2"`
	EndDate       pgtype.Date        `json:"end_date"`
	Status_2      pgtype.Text        `json:"status_2"`
	Name          pgtype.Text        `json:"name"`
	Type          pgtype.Text        `json:"type"`
	Description_2 pgtype.Text        `json:"description_2"`
	CreatedAt_2   pgtype.Timestamptz `json:"created_at_2"`
	DoctorID      pgtype.Int4        `json:"doctor_id"`
}

<<<<<<< HEAD
// Get Treatment Phases for a Treatment
<<<<<<< HEAD
func (q *Queries) GetTreatmentPhasesByTreatment(ctx context.Context, id int64) ([]TreatmentPhase, error) {
	rows, err := q.db.Query(ctx, getTreatmentPhasesByTreatment, id)
>>>>>>> 3bf345d (happy new year)
=======
=======
>>>>>>> e859654 (Elastic search)
func (q *Queries) GetTreatmentPhasesByTreatment(ctx context.Context, arg GetTreatmentPhasesByTreatmentParams) ([]GetTreatmentPhasesByTreatmentRow, error) {
	rows, err := q.db.Query(ctx, getTreatmentPhasesByTreatment, arg.ID, arg.Limit, arg.Offset)
>>>>>>> 2fe5baf (treatment phase)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTreatmentPhasesByTreatmentRow{}
	for rows.Next() {
		var i GetTreatmentPhasesByTreatmentRow
		if err := rows.Scan(
			&i.ID,
			&i.TreatmentID,
			&i.PhaseName,
			&i.Description,
			&i.Status,
			&i.StartDate,
			&i.CreatedAt,
			&i.ID_2,
			&i.PetID,
			&i.DiseaseID,
			&i.StartDate_2,
			&i.EndDate,
			&i.Status_2,
			&i.Name,
			&i.Type,
			&i.Description_2,
			&i.CreatedAt_2,
			&i.DoctorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

<<<<<<< HEAD
const getClinicInfo = `-- name: GetClinicInfo :one
SELECT 
    name, 
    address, 
    phone 
FROM clinics 
WHERE id = $1
`

type GetClinicInfoRow struct {
	Name    pgtype.Text `json:"name"`
	Address pgtype.Text `json:"address"`
	Phone   pgtype.Text `json:"phone"`
}

func (q *Queries) GetClinicInfo(ctx context.Context, id int64) (GetClinicInfoRow, error) {
	row := q.db.QueryRow(ctx, getClinicInfo, id)
	var i GetClinicInfoRow
	err := row.Scan(&i.Name, &i.Address, &i.Phone)
	return i, err
}

const getMedicationsByPhase = `-- name: GetMedicationsByPhase :many
SELECT m.id, m.name, pm.dosage, pm.frequency, pm.duration, pm.notes ,pm.Created_at
FROM medicines m
JOIN phase_medicines pm ON m.id = pm.medicine_id
WHERE pm.phase_id = $1
`

type GetMedicationsByPhaseRow struct {
	ID        int64              `json:"id"`
	Name      string             `json:"name"`
	Dosage    pgtype.Text        `json:"dosage"`
	Frequency pgtype.Text        `json:"frequency"`
	Duration  pgtype.Text        `json:"duration"`
	Notes     pgtype.Text        `json:"notes"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetMedicationsByPhase(ctx context.Context, phaseID int64) ([]GetMedicationsByPhaseRow, error) {
	rows, err := q.db.Query(ctx, getMedicationsByPhase, phaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMedicationsByPhaseRow{}
	for rows.Next() {
		var i GetMedicationsByPhaseRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Dosage,
			&i.Frequency,
			&i.Duration,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMedicineByTreatmentID = `-- name: GetMedicineByTreatmentID :many
SELECT pm.medicine_id, pm.dosage, pm.frequency, pm.duration, pm.quantity, pm.notes, pm.is_received
FROM phase_medicines pm
JOIN treatment_phases tp ON pm.phase_id = tp.id
WHERE tp.treatment_id = $1
`

type GetMedicineByTreatmentIDRow struct {
	MedicineID int64       `json:"medicine_id"`
	Dosage     pgtype.Text `json:"dosage"`
	Frequency  pgtype.Text `json:"frequency"`
	Duration   pgtype.Text `json:"duration"`
	Quantity   pgtype.Int4 `json:"quantity"`
	Notes      pgtype.Text `json:"notes"`
	IsReceived pgtype.Bool `json:"is_received"`
}

func (q *Queries) GetMedicineByTreatmentID(ctx context.Context, treatmentID pgtype.Int8) ([]GetMedicineByTreatmentIDRow, error) {
	rows, err := q.db.Query(ctx, getMedicineByTreatmentID, treatmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMedicineByTreatmentIDRow{}
	for rows.Next() {
		var i GetMedicineByTreatmentIDRow
		if err := rows.Scan(
			&i.MedicineID,
			&i.Dosage,
			&i.Frequency,
			&i.Duration,
			&i.Quantity,
			&i.Notes,
			&i.IsReceived,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTreatment = `-- name: GetTreatment :one
SELECT id, pet_id, disease_id, start_date, end_date, status, name, type, description, created_at, doctor_id FROM pet_treatments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTreatment(ctx context.Context, id int64) (PetTreatment, error) {
	row := q.db.QueryRow(ctx, getTreatment, id)
	var i PetTreatment
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.DiseaseID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.Name,
		&i.Type,
		&i.Description,
		&i.CreatedAt,
		&i.DoctorID,
	)
	return i, err
}

const getTreatmentPhase = `-- name: GetTreatmentPhase :one
SELECT id, treatment_id, phase_name, description, status, start_date, created_at FROM treatment_phases
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTreatmentPhase(ctx context.Context, id int64) (TreatmentPhase, error) {
	row := q.db.QueryRow(ctx, getTreatmentPhase, id)
	var i TreatmentPhase
	err := row.Scan(
		&i.ID,
		&i.TreatmentID,
		&i.PhaseName,
		&i.Description,
		&i.Status,
		&i.StartDate,
		&i.CreatedAt,
	)
	return i, err
}

const getTreatmentPhasesByTreatment = `-- name: GetTreatmentPhasesByTreatment :many
SELECT tp.id, treatment_id, phase_name, tp.description, tp.status, tp.start_date, tp.created_at, t.id, pet_id, disease_id, t.start_date, end_date, t.status, name, type, t.description, t.created_at, doctor_id  FROM treatment_phases as tp
JOIN pet_treatments t ON t.id = tp.treatment_id
WHERE t.id = $1 LIMIT $2 OFFSET $3
`

type GetTreatmentPhasesByTreatmentParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetTreatmentPhasesByTreatmentRow struct {
	ID            int64              `json:"id"`
	TreatmentID   pgtype.Int8        `json:"treatment_id"`
	PhaseName     pgtype.Text        `json:"phase_name"`
	Description   pgtype.Text        `json:"description"`
	Status        pgtype.Text        `json:"status"`
	StartDate     pgtype.Date        `json:"start_date"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	ID_2          int64              `json:"id_2"`
	PetID         pgtype.Int8        `json:"pet_id"`
	DiseaseID     pgtype.Int8        `json:"disease_id"`
	StartDate_2   pgtype.Date        `json:"start_date_2"`
	EndDate       pgtype.Date        `json:"end_date"`
	Status_2      pgtype.Text        `json:"status_2"`
	Name          pgtype.Text        `json:"name"`
	Type          pgtype.Text        `json:"type"`
	Description_2 pgtype.Text        `json:"description_2"`
	CreatedAt_2   pgtype.Timestamptz `json:"created_at_2"`
	DoctorID      pgtype.Int4        `json:"doctor_id"`
}

func (q *Queries) GetTreatmentPhasesByTreatment(ctx context.Context, arg GetTreatmentPhasesByTreatmentParams) ([]GetTreatmentPhasesByTreatmentRow, error) {
	rows, err := q.db.Query(ctx, getTreatmentPhasesByTreatment, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTreatmentPhasesByTreatmentRow{}
	for rows.Next() {
		var i GetTreatmentPhasesByTreatmentRow
		if err := rows.Scan(
			&i.ID,
			&i.TreatmentID,
			&i.PhaseName,
			&i.Description,
			&i.Status,
			&i.StartDate,
			&i.CreatedAt,
			&i.ID_2,
			&i.PetID,
			&i.DiseaseID,
			&i.StartDate_2,
			&i.EndDate,
			&i.Status_2,
			&i.Name,
			&i.Type,
			&i.Description_2,
			&i.CreatedAt_2,
			&i.DoctorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

=======
>>>>>>> 3bf345d (happy new year)
=======
>>>>>>> 3bf345d (happy new year)
const getTreatmentProgress = `-- name: GetTreatmentProgress :many
SELECT tp.phase_name, tp.status, tp.start_date,COUNT(pm.medicine_id) AS num_medicines
FROM treatment_phases tp
LEFT JOIN phase_medicines pm ON tp.id = pm.phase_id
WHERE tp.id = $1
GROUP BY tp.id
`

type GetTreatmentProgressRow struct {
	PhaseName    pgtype.Text `json:"phase_name"`
	Status       pgtype.Text `json:"status"`
	StartDate    pgtype.Date `json:"start_date"`
	NumMedicines int64       `json:"num_medicines"`
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
// Get Treatment Progress
>>>>>>> 3bf345d (happy new year)
=======
>>>>>>> e859654 (Elastic search)
=======
// Get Treatment Progress
>>>>>>> 3bf345d (happy new year)
func (q *Queries) GetTreatmentProgress(ctx context.Context, id int64) ([]GetTreatmentProgressRow, error) {
	rows, err := q.db.Query(ctx, getTreatmentProgress, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTreatmentProgressRow{}
	for rows.Next() {
		var i GetTreatmentProgressRow
		if err := rows.Scan(
			&i.PhaseName,
			&i.Status,
			&i.StartDate,
			&i.NumMedicines,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTreatmentsByPet = `-- name: GetTreatmentsByPet :many
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
SELECT t.id, t.pet_id, t.disease_id, t.start_date, t.end_date, t.status, t.name, t.type, t.description, t.created_at, t.doctor_id, d.name AS disease
FROM pet_treatments t
JOIN diseases d ON t.disease_id = d.id
WHERE t.pet_id = $1 LIMIT $2 OFFSET $3
`

type GetTreatmentsByPetParams struct {
	PetID  pgtype.Int8 `json:"pet_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

type GetTreatmentsByPetRow struct {
	ID          int64              `json:"id"`
	PetID       pgtype.Int8        `json:"pet_id"`
	DiseaseID   pgtype.Int8        `json:"disease_id"`
	StartDate   pgtype.Date        `json:"start_date"`
	EndDate     pgtype.Date        `json:"end_date"`
	Status      pgtype.Text        `json:"status"`
	Name        pgtype.Text        `json:"name"`
	Type        pgtype.Text        `json:"type"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	DoctorID    pgtype.Int4        `json:"doctor_id"`
	Disease     string             `json:"disease"`
}

func (q *Queries) GetTreatmentsByPet(ctx context.Context, arg GetTreatmentsByPetParams) ([]GetTreatmentsByPetRow, error) {
	rows, err := q.db.Query(ctx, getTreatmentsByPet, arg.PetID, arg.Limit, arg.Offset)
=======
SELECT t.id, d.name AS disease, t.start_date, t.end_date, t.status
=======
SELECT t.id as treatment_id, d.name AS disease, t.start_date, t.end_date, t.status
>>>>>>> 2fe5baf (treatment phase)
=======
SELECT t.id, t.pet_id, t.disease_id, t.start_date, t.end_date, t.status, t.name, t.type, t.description, t.created_at, t.doctor_id, d.name AS disease
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
FROM pet_treatments t
JOIN diseases d ON t.disease_id = d.id
WHERE t.pet_id = $1 LIMIT $2 OFFSET $3
`

type GetTreatmentsByPetParams struct {
	PetID  pgtype.Int8 `json:"pet_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

type GetTreatmentsByPetRow struct {
	ID          int64              `json:"id"`
	PetID       pgtype.Int8        `json:"pet_id"`
	DiseaseID   pgtype.Int8        `json:"disease_id"`
	StartDate   pgtype.Date        `json:"start_date"`
	EndDate     pgtype.Date        `json:"end_date"`
	Status      pgtype.Text        `json:"status"`
	Name        pgtype.Text        `json:"name"`
	Type        pgtype.Text        `json:"type"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	DoctorID    pgtype.Int4        `json:"doctor_id"`
	Disease     string             `json:"disease"`
}

<<<<<<< HEAD
// Get All Treatments for a Pet
<<<<<<< HEAD
func (q *Queries) GetTreatmentsByPet(ctx context.Context, petID pgtype.Int8) ([]GetTreatmentsByPetRow, error) {
	rows, err := q.db.Query(ctx, getTreatmentsByPet, petID)
>>>>>>> 3bf345d (happy new year)
=======
=======
>>>>>>> e859654 (Elastic search)
func (q *Queries) GetTreatmentsByPet(ctx context.Context, arg GetTreatmentsByPetParams) ([]GetTreatmentsByPetRow, error) {
	rows, err := q.db.Query(ctx, getTreatmentsByPet, arg.PetID, arg.Limit, arg.Offset)
>>>>>>> 2fe5baf (treatment phase)
=======
SELECT t.id, d.name AS disease, t.start_date, t.end_date, t.status
=======
SELECT t.id as treatment_id, d.name AS disease, t.start_date, t.end_date, t.status
>>>>>>> 2fe5baf (treatment phase)
FROM pet_treatments t
JOIN diseases d ON t.disease_id = d.id
WHERE t.pet_id = $1 LIMIT $2 OFFSET $3
`

type GetTreatmentsByPetParams struct {
	PetID  pgtype.Int8 `json:"pet_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

type GetTreatmentsByPetRow struct {
	TreatmentID int64       `json:"treatment_id"`
	Disease     string      `json:"disease"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	Status      pgtype.Text `json:"status"`
}

// Get All Treatments for a Pet
<<<<<<< HEAD
func (q *Queries) GetTreatmentsByPet(ctx context.Context, petID pgtype.Int8) ([]GetTreatmentsByPetRow, error) {
	rows, err := q.db.Query(ctx, getTreatmentsByPet, petID)
>>>>>>> 3bf345d (happy new year)
=======
func (q *Queries) GetTreatmentsByPet(ctx context.Context, arg GetTreatmentsByPetParams) ([]GetTreatmentsByPetRow, error) {
	rows, err := q.db.Query(ctx, getTreatmentsByPet, arg.PetID, arg.Limit, arg.Offset)
>>>>>>> 2fe5baf (treatment phase)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTreatmentsByPetRow{}
	for rows.Next() {
		var i GetTreatmentsByPetRow
		if err := rows.Scan(
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
			&i.ID,
<<<<<<< HEAD
			&i.PetID,
			&i.DiseaseID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.Name,
			&i.Type,
			&i.Description,
			&i.CreatedAt,
			&i.DoctorID,
			&i.Disease,
=======
=======
			&i.TreatmentID,
>>>>>>> 2fe5baf (treatment phase)
=======
			&i.ID,
>>>>>>> 3bf345d (happy new year)
=======
			&i.TreatmentID,
>>>>>>> 2fe5baf (treatment phase)
			&i.Disease,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
<<<<<<< HEAD
>>>>>>> 3bf345d (happy new year)
=======
			&i.ID,
			&i.PetID,
			&i.DiseaseID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.Name,
			&i.Type,
			&i.Description,
			&i.CreatedAt,
			&i.DoctorID,
			&i.Disease,
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
=======
>>>>>>> 3bf345d (happy new year)
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTreatmentsByPet = `-- name: ListTreatmentsByPet :many
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
SELECT id, pet_id, disease_id, start_date, end_date, status, name, type, description, created_at, doctor_id FROM pet_treatments
=======
SELECT id, pet_id, disease_id, start_date, end_date, status, notes, created_at FROM pet_treatments
>>>>>>> 3bf345d (happy new year)
=======
SELECT id, pet_id, disease_id, start_date, end_date, status, notes, created_at, doctor_id FROM pet_treatments
>>>>>>> ada3717 (Docker file)
=======
SELECT id, pet_id, disease_id, start_date, end_date, status, name, type, notes, created_at, doctor_id FROM pet_treatments
>>>>>>> c8bec46 (feat: add chatbot, room management, and pet allergy features)
=======
SELECT id, pet_id, disease_id, start_date, end_date, status, name, type, description, created_at, doctor_id FROM pet_treatments
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
=======
SELECT id, pet_id, disease_id, start_date, end_date, status, notes, created_at FROM pet_treatments
>>>>>>> 3bf345d (happy new year)
WHERE pet_id = $1
ORDER BY start_date DESC
LIMIT $2 OFFSET $3
`

type ListTreatmentsByPetParams struct {
	PetID  pgtype.Int8 `json:"pet_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListTreatmentsByPet(ctx context.Context, arg ListTreatmentsByPetParams) ([]PetTreatment, error) {
	rows, err := q.db.Query(ctx, listTreatmentsByPet, arg.PetID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PetTreatment{}
	for rows.Next() {
		var i PetTreatment
		if err := rows.Scan(
			&i.ID,
			&i.PetID,
			&i.DiseaseID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
			&i.Name,
			&i.Type,
			&i.Description,
=======
			&i.Name,
			&i.Type,
<<<<<<< HEAD
			&i.Notes,
>>>>>>> c8bec46 (feat: add chatbot, room management, and pet allergy features)
=======
			&i.Description,
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
			&i.CreatedAt,
			&i.DoctorID,
=======
			&i.Notes,
			&i.CreatedAt,
<<<<<<< HEAD
>>>>>>> 3bf345d (happy new year)
=======
			&i.DoctorID,
>>>>>>> ada3717 (Docker file)
=======
			&i.Notes,
			&i.CreatedAt,
>>>>>>> 3bf345d (happy new year)
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTreatment = `-- name: UpdateTreatment :exec
UPDATE pet_treatments
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
SET disease_id = $2, start_date = $3, end_date = $4, status = $5, description = $6
=======
SET disease_id = $2, start_date = $3, end_date = $4, status = $5, notes = $6
>>>>>>> 3bf345d (happy new year)
=======
SET disease_id = $2, start_date = $3, end_date = $4, status = $5, description = $6
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
=======
SET disease_id = $2, start_date = $3, end_date = $4, status = $5, notes = $6
>>>>>>> 3bf345d (happy new year)
WHERE id = $1
`

type UpdateTreatmentParams struct {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
	ID          int64       `json:"id"`
	DiseaseID   pgtype.Int8 `json:"disease_id"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	Status      pgtype.Text `json:"status"`
	Description pgtype.Text `json:"description"`
<<<<<<< HEAD
=======
=======
>>>>>>> 3bf345d (happy new year)
	ID        int64       `json:"id"`
	DiseaseID pgtype.Int8 `json:"disease_id"`
	StartDate pgtype.Date `json:"start_date"`
	EndDate   pgtype.Date `json:"end_date"`
	Status    pgtype.Text `json:"status"`
	Notes     pgtype.Text `json:"notes"`
<<<<<<< HEAD
>>>>>>> 3bf345d (happy new year)
=======
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
=======
>>>>>>> 3bf345d (happy new year)
}

func (q *Queries) UpdateTreatment(ctx context.Context, arg UpdateTreatmentParams) error {
	_, err := q.db.Exec(ctx, updateTreatment,
		arg.ID,
		arg.DiseaseID,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
		arg.Description,
=======
		arg.Notes,
>>>>>>> 3bf345d (happy new year)
=======
		arg.Description,
>>>>>>> 6b24d88 (feat(payment): add PayOS payment integration and enhance treatment module)
=======
		arg.Notes,
>>>>>>> 3bf345d (happy new year)
	)
	return err
}

const updateTreatmentPhaseStatus = `-- name: UpdateTreatmentPhaseStatus :exec
UPDATE treatment_phases
SET status = $2 and updated_at = now()
WHERE id = $1
`

type UpdateTreatmentPhaseStatusParams struct {
	ID     int64       `json:"id"`
	Status pgtype.Text `json:"status"`
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
// Update Treatment Phase Status
>>>>>>> 3bf345d (happy new year)
=======
>>>>>>> e859654 (Elastic search)
=======
// Update Treatment Phase Status
>>>>>>> 3bf345d (happy new year)
func (q *Queries) UpdateTreatmentPhaseStatus(ctx context.Context, arg UpdateTreatmentPhaseStatusParams) error {
	_, err := q.db.Exec(ctx, updateTreatmentPhaseStatus, arg.ID, arg.Status)
	return err
}
