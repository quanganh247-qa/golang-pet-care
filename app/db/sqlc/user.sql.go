// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, hashed_password, full_name, email, phone_number, address, data_image, original_image, role, created_at, is_verified_email)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, NOW(), $10)
RETURNING id, username, hashed_password, full_name, email, phone_number, address, data_image, original_image, role, status, created_at, is_verified_email, removed_at
`

type CreateUserParams struct {
	Username        string      `json:"username"`
	HashedPassword  string      `json:"hashed_password"`
	FullName        string      `json:"full_name"`
	Email           string      `json:"email"`
	PhoneNumber     pgtype.Text `json:"phone_number"`
	Address         pgtype.Text `json:"address"`
	DataImage       []byte      `json:"data_image"`
	OriginalImage   pgtype.Text `json:"original_image"`
	Role            pgtype.Text `json:"role"`
	IsVerifiedEmail pgtype.Bool `json:"is_verified_email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.DataImage,
		arg.OriginalImage,
		arg.Role,
		arg.IsVerifiedEmail,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.DataImage,
		&i.OriginalImage,
		&i.Role,
		&i.Status,
		&i.CreatedAt,
		&i.IsVerifiedEmail,
		&i.RemovedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAllRole = `-- name: GetAllRole :many
SELECT distinct (role) FROM users
`

func (q *Queries) GetAllRole(ctx context.Context) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getAllRole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.Text{}
	for rows.Next() {
		var role pgtype.Text
		if err := rows.Scan(&role); err != nil {
			return nil, err
		}
		items = append(items, role)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, hashed_password, full_name, email, phone_number, address, data_image, original_image, role, status, created_at, is_verified_email, removed_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.FullName,
			&i.Email,
			&i.PhoneNumber,
			&i.Address,
			&i.DataImage,
			&i.OriginalImage,
			&i.Role,
			&i.Status,
			&i.CreatedAt,
			&i.IsVerifiedEmail,
			&i.RemovedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, hashed_password, full_name, email, phone_number, address, data_image, original_image, role, created_at, is_verified_email
FROM users
WHERE username = $1
`

type GetUserRow struct {
	ID              int64            `json:"id"`
	Username        string           `json:"username"`
	HashedPassword  string           `json:"hashed_password"`
	FullName        string           `json:"full_name"`
	Email           string           `json:"email"`
	PhoneNumber     pgtype.Text      `json:"phone_number"`
	Address         pgtype.Text      `json:"address"`
	DataImage       []byte           `json:"data_image"`
	OriginalImage   pgtype.Text      `json:"original_image"`
	Role            pgtype.Text      `json:"role"`
	CreatedAt       pgtype.Timestamp `json:"created_at"`
	IsVerifiedEmail pgtype.Bool      `json:"is_verified_email"`
}

func (q *Queries) GetUser(ctx context.Context, username string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.DataImage,
		&i.OriginalImage,
		&i.Role,
		&i.CreatedAt,
		&i.IsVerifiedEmail,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, hashed_password, full_name, email, phone_number, address, data_image, original_image, role, status, created_at, is_verified_email, removed_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.DataImage,
		&i.OriginalImage,
		&i.Role,
		&i.Status,
		&i.CreatedAt,
		&i.IsVerifiedEmail,
		&i.RemovedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, hashed_password, full_name, email, phone_number, address, data_image, original_image, role, created_at, is_verified_email
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID              int64            `json:"id"`
	Username        string           `json:"username"`
	HashedPassword  string           `json:"hashed_password"`
	FullName        string           `json:"full_name"`
	Email           string           `json:"email"`
	PhoneNumber     pgtype.Text      `json:"phone_number"`
	Address         pgtype.Text      `json:"address"`
	DataImage       []byte           `json:"data_image"`
	OriginalImage   pgtype.Text      `json:"original_image"`
	Role            pgtype.Text      `json:"role"`
	CreatedAt       pgtype.Timestamp `json:"created_at"`
	IsVerifiedEmail pgtype.Bool      `json:"is_verified_email"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.DataImage,
		&i.OriginalImage,
		&i.Role,
		&i.CreatedAt,
		&i.IsVerifiedEmail,
	)
	return i, err
}

const getUserByRole = `-- name: GetUserByRole :many
SELECT id, username, hashed_password, full_name, email, phone_number, address, data_image, original_image, role, status, created_at, is_verified_email, removed_at FROM users
WHERE role = $1
`

func (q *Queries) GetUserByRole(ctx context.Context, role pgtype.Text) ([]User, error) {
	rows, err := q.db.Query(ctx, getUserByRole, role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.FullName,
			&i.Email,
			&i.PhoneNumber,
			&i.Address,
			&i.DataImage,
			&i.OriginalImage,
			&i.Role,
			&i.Status,
			&i.CreatedAt,
			&i.IsVerifiedEmail,
			&i.RemovedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDoctor = `-- name: InsertDoctor :one
INSERT INTO Doctors (
    user_id,
    specialization,
    years_of_experience,
    education,
    certificate_number,
    bio
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, specialization, years_of_experience, education, certificate_number, bio
`

type InsertDoctorParams struct {
	UserID            int64       `json:"user_id"`
	Specialization    pgtype.Text `json:"specialization"`
	YearsOfExperience pgtype.Int4 `json:"years_of_experience"`
	Education         pgtype.Text `json:"education"`
	CertificateNumber pgtype.Text `json:"certificate_number"`
	Bio               pgtype.Text `json:"bio"`
}

func (q *Queries) InsertDoctor(ctx context.Context, arg InsertDoctorParams) (Doctor, error) {
	row := q.db.QueryRow(ctx, insertDoctor,
		arg.UserID,
		arg.Specialization,
		arg.YearsOfExperience,
		arg.Education,
		arg.CertificateNumber,
		arg.Bio,
	)
	var i Doctor
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Specialization,
		&i.YearsOfExperience,
		&i.Education,
		&i.CertificateNumber,
		&i.Bio,
	)
	return i, err
}

const updateAvatarUser = `-- name: UpdateAvatarUser :one
UPDATE users
SET data_image = $2, original_image = $3
WHERE username = $1
RETURNING id, username, hashed_password, full_name, email, phone_number, address, data_image, original_image, role, status, created_at, is_verified_email, removed_at
`

type UpdateAvatarUserParams struct {
	Username      string      `json:"username"`
	DataImage     []byte      `json:"data_image"`
	OriginalImage pgtype.Text `json:"original_image"`
}

func (q *Queries) UpdateAvatarUser(ctx context.Context, arg UpdateAvatarUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateAvatarUser, arg.Username, arg.DataImage, arg.OriginalImage)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.DataImage,
		&i.OriginalImage,
		&i.Role,
		&i.Status,
		&i.CreatedAt,
		&i.IsVerifiedEmail,
		&i.RemovedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET full_name = $2, email = $3, phone_number = $4, address = $5
WHERE username = $1
RETURNING id, username, hashed_password, full_name, email, phone_number, address, data_image, original_image, role, status, created_at, is_verified_email, removed_at
`

type UpdateUserParams struct {
	Username    string      `json:"username"`
	FullName    string      `json:"full_name"`
	Email       string      `json:"email"`
	PhoneNumber pgtype.Text `json:"phone_number"`
	Address     pgtype.Text `json:"address"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.DataImage,
		&i.OriginalImage,
		&i.Role,
		&i.Status,
		&i.CreatedAt,
		&i.IsVerifiedEmail,
		&i.RemovedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET hashed_password = $2
WHERE username = $1 RETURNING id, username, hashed_password, full_name, email, phone_number, address, data_image, original_image, role, status, created_at, is_verified_email, removed_at
`

type UpdateUserPasswordParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.DataImage,
		&i.OriginalImage,
		&i.Role,
		&i.Status,
		&i.CreatedAt,
		&i.IsVerifiedEmail,
		&i.RemovedAt,
	)
	return i, err
}

const verifiedUser = `-- name: VerifiedUser :one
UPDATE users
SET is_verified_email = true
WHERE username = $1
RETURNING id, username, hashed_password, full_name, email, phone_number, address, data_image, original_image, role, status, created_at, is_verified_email, removed_at
`

func (q *Queries) VerifiedUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, verifiedUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.DataImage,
		&i.OriginalImage,
		&i.Role,
		&i.Status,
		&i.CreatedAt,
		&i.IsVerifiedEmail,
		&i.RemovedAt,
	)
	return i, err
}
