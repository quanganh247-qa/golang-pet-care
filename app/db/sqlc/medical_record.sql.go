// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: medical_record.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMedicalHistory = `-- name: CreateMedicalHistory :one
INSERT INTO medical_history(medical_record_id, condition, diagnosis_date, treatment, notes, created_at,updated_at)
VALUES ($1, $2, $3, $4, $5, now(), now())
RETURNING id, medical_record_id, condition, diagnosis_date, notes, treatment, created_at, updated_at
`

type CreateMedicalHistoryParams struct {
	MedicalRecordID pgtype.Int8      `json:"medical_record_id"`
	Condition       pgtype.Text      `json:"condition"`
	DiagnosisDate   pgtype.Timestamp `json:"diagnosis_date"`
	Treatment       pgtype.Int8      `json:"treatment"`
	Notes           pgtype.Text      `json:"notes"`
}

func (q *Queries) CreateMedicalHistory(ctx context.Context, arg CreateMedicalHistoryParams) (MedicalHistory, error) {
	row := q.db.QueryRow(ctx, createMedicalHistory,
		arg.MedicalRecordID,
		arg.Condition,
		arg.DiagnosisDate,
		arg.Treatment,
		arg.Notes,
	)
	var i MedicalHistory
	err := row.Scan(
		&i.ID,
		&i.MedicalRecordID,
		&i.Condition,
		&i.DiagnosisDate,
		&i.Notes,
		&i.Treatment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createMedicalRecord = `-- name: CreateMedicalRecord :one
INSERT INTO medical_records (pet_id,created_at,updated_at)
VALUES ($1,now(),now())
RETURNING id, pet_id, created_at, updated_at
`

func (q *Queries) CreateMedicalRecord(ctx context.Context, petID pgtype.Int8) (MedicalRecord, error) {
	row := q.db.QueryRow(ctx, createMedicalRecord, petID)
	var i MedicalRecord
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMedicalHistory = `-- name: DeleteMedicalHistory :exec
DELETE FROM medical_history
WHERE id = $1
`

func (q *Queries) DeleteMedicalHistory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMedicalHistory, id)
	return err
}

const deleteMedicalRecord = `-- name: DeleteMedicalRecord :exec
DELETE FROM medical_records
WHERE id = $1
`

func (q *Queries) DeleteMedicalRecord(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMedicalRecord, id)
	return err
}

const getMedicalHistory = `-- name: GetMedicalHistory :many
SELECT id, medical_record_id, condition, diagnosis_date, notes, treatment, created_at, updated_at FROM medical_history
WHERE medical_record_id = $1 LIMIT $2 OFFSET $3
`

type GetMedicalHistoryParams struct {
	MedicalRecordID pgtype.Int8 `json:"medical_record_id"`
	Limit           int32       `json:"limit"`
	Offset          int32       `json:"offset"`
}

func (q *Queries) GetMedicalHistory(ctx context.Context, arg GetMedicalHistoryParams) ([]MedicalHistory, error) {
	rows, err := q.db.Query(ctx, getMedicalHistory, arg.MedicalRecordID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MedicalHistory{}
	for rows.Next() {
		var i MedicalHistory
		if err := rows.Scan(
			&i.ID,
			&i.MedicalRecordID,
			&i.Condition,
			&i.DiagnosisDate,
			&i.Notes,
			&i.Treatment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMedicalHistoryByID = `-- name: GetMedicalHistoryByID :one
SELECT id, medical_record_id, condition, diagnosis_date, notes, treatment, created_at, updated_at FROM medical_history
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMedicalHistoryByID(ctx context.Context, id int64) (MedicalHistory, error) {
	row := q.db.QueryRow(ctx, getMedicalHistoryByID, id)
	var i MedicalHistory
	err := row.Scan(
		&i.ID,
		&i.MedicalRecordID,
		&i.Condition,
		&i.DiagnosisDate,
		&i.Notes,
		&i.Treatment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMedicalRecord = `-- name: GetMedicalRecord :one
SELECT id, pet_id, created_at, updated_at FROM medical_records
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMedicalRecord(ctx context.Context, id int64) (MedicalRecord, error) {
	row := q.db.QueryRow(ctx, getMedicalRecord, id)
	var i MedicalRecord
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMedicalHistory = `-- name: UpdateMedicalHistory :exec
UPDATE medical_history
SET condition = $2, diagnosis_date = $3, treatment = $4, notes = $5, updated_at = NOW()
WHERE id = $1
`

type UpdateMedicalHistoryParams struct {
	ID            int64            `json:"id"`
	Condition     pgtype.Text      `json:"condition"`
	DiagnosisDate pgtype.Timestamp `json:"diagnosis_date"`
	Treatment     pgtype.Int8      `json:"treatment"`
	Notes         pgtype.Text      `json:"notes"`
}

func (q *Queries) UpdateMedicalHistory(ctx context.Context, arg UpdateMedicalHistoryParams) error {
	_, err := q.db.Exec(ctx, updateMedicalHistory,
		arg.ID,
		arg.Condition,
		arg.DiagnosisDate,
		arg.Treatment,
		arg.Notes,
	)
	return err
}

const updateMedicalRecord = `-- name: UpdateMedicalRecord :exec
UPDATE medical_records
SET updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateMedicalRecord(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateMedicalRecord, id)
	return err
}
