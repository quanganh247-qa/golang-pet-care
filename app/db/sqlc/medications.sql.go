// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: medications.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllMedicinesByPet = `-- name: GetAllMedicinesByPet :many
SELECT medication_id, pet_id, medication_name, dosage, frequency, start_date, end_date, notes FROM Medications where pet_id = $3  ORDER BY medication_id LIMIT $1 OFFSET $2
`

type GetAllMedicinesByPetParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	PetID  int64 `json:"pet_id"`
}

func (q *Queries) GetAllMedicinesByPet(ctx context.Context, arg GetAllMedicinesByPetParams) ([]Medication, error) {
	rows, err := q.db.Query(ctx, getAllMedicinesByPet, arg.Limit, arg.Offset, arg.PetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Medication{}
	for rows.Next() {
		var i Medication
		if err := rows.Scan(
			&i.MedicationID,
			&i.PetID,
			&i.MedicationName,
			&i.Dosage,
			&i.Frequency,
			&i.StartDate,
			&i.EndDate,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMedicinesByID = `-- name: GetMedicinesByID :one
SELECT medication_id, pet_id, medication_name, dosage, frequency, start_date, end_date, notes FROM Medications WHERE medication_id = $1
`

func (q *Queries) GetMedicinesByID(ctx context.Context, medicationID int64) (Medication, error) {
	row := q.db.QueryRow(ctx, getMedicinesByID, medicationID)
	var i Medication
	err := row.Scan(
		&i.MedicationID,
		&i.PetID,
		&i.MedicationName,
		&i.Dosage,
		&i.Frequency,
		&i.StartDate,
		&i.EndDate,
		&i.Notes,
	)
	return i, err
}

const insertMedicine = `-- name: InsertMedicine :one
INSERT INTO Medications (pet_id, medication_name, dosage, frequency, start_date, end_date, notes)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING medication_id, pet_id, medication_name, dosage, frequency, start_date, end_date, notes
`

type InsertMedicineParams struct {
	PetID          int64            `json:"pet_id"`
	MedicationName string           `json:"medication_name"`
	Dosage         string           `json:"dosage"`
	Frequency      string           `json:"frequency"`
	StartDate      pgtype.Timestamp `json:"start_date"`
	EndDate        pgtype.Timestamp `json:"end_date"`
	Notes          pgtype.Text      `json:"notes"`
}

func (q *Queries) InsertMedicine(ctx context.Context, arg InsertMedicineParams) (Medication, error) {
	row := q.db.QueryRow(ctx, insertMedicine,
		arg.PetID,
		arg.MedicationName,
		arg.Dosage,
		arg.Frequency,
		arg.StartDate,
		arg.EndDate,
		arg.Notes,
	)
	var i Medication
	err := row.Scan(
		&i.MedicationID,
		&i.PetID,
		&i.MedicationName,
		&i.Dosage,
		&i.Frequency,
		&i.StartDate,
		&i.EndDate,
		&i.Notes,
	)
	return i, err
}

const updateMedicine = `-- name: UpdateMedicine :one

UPDATE Medications 
SET 
  medication_name = COALESCE($1, medication_name),
  dosage =  COALESCE($2,dosage),
  frequency = COALESCE($3,frequency),
  start_date = COALESCE($4,start_date),
  end_date = COALESCE($5,end_date),
  notes = COALESCE($6,notes)
WHERE
  medication_id = $7
RETURNING medication_id, pet_id, medication_name, dosage, frequency, start_date, end_date, notes
`

type UpdateMedicineParams struct {
	MedicationName pgtype.Text      `json:"medication_name"`
	Dosage         pgtype.Text      `json:"dosage"`
	Frequency      pgtype.Text      `json:"frequency"`
	StartDate      pgtype.Timestamp `json:"start_date"`
	EndDate        pgtype.Timestamp `json:"end_date"`
	Notes          pgtype.Text      `json:"notes"`
	MedicationID   int64            `json:"medication_id"`
}

// -- name: UpdateMedicine :exec
// UPDATE Medications
// SET medication_name = $2, dosage = $3, frequency = $4, start_date = $5, end_date = $6, notes = $7
// WHERE medication_id = $1;
func (q *Queries) UpdateMedicine(ctx context.Context, arg UpdateMedicineParams) (Medication, error) {
	row := q.db.QueryRow(ctx, updateMedicine,
		arg.MedicationName,
		arg.Dosage,
		arg.Frequency,
		arg.StartDate,
		arg.EndDate,
		arg.Notes,
		arg.MedicationID,
	)
	var i Medication
	err := row.Scan(
		&i.MedicationID,
		&i.PetID,
		&i.MedicationName,
		&i.Dosage,
		&i.Frequency,
		&i.StartDate,
		&i.EndDate,
		&i.Notes,
	)
	return i, err
}
