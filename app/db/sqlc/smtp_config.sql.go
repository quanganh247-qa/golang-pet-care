// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: smtp_config.sql

package db

import (
	"context"
)

const createSMTPConfig = `-- name: CreateSMTPConfig :one
INSERT INTO smtp_configs (
    name,
    email,
    password,
    smtp_host,
    smtp_port,
    is_default
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, name, email, password, smtp_host, smtp_port, is_default, created_at, updated_at
`

type CreateSMTPConfigParams struct {
	Name      string `json:"name"`
	Email     string `json:"email"`
	Password  string `json:"password"`
	SmtpHost  string `json:"smtp_host"`
	SmtpPort  string `json:"smtp_port"`
	IsDefault bool   `json:"is_default"`
}

func (q *Queries) CreateSMTPConfig(ctx context.Context, arg CreateSMTPConfigParams) (SmtpConfig, error) {
	row := q.db.QueryRow(ctx, createSMTPConfig,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.SmtpHost,
		arg.SmtpPort,
		arg.IsDefault,
	)
	var i SmtpConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.SmtpHost,
		&i.SmtpPort,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSMTPConfig = `-- name: DeleteSMTPConfig :exec
DELETE FROM smtp_configs
WHERE id = $1
`

func (q *Queries) DeleteSMTPConfig(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSMTPConfig, id)
	return err
}

const getDefaultSMTPConfig = `-- name: GetDefaultSMTPConfig :one
SELECT id, name, email, password, smtp_host, smtp_port, is_default, created_at, updated_at
FROM smtp_configs
WHERE is_default = true
LIMIT 1
`

func (q *Queries) GetDefaultSMTPConfig(ctx context.Context) (SmtpConfig, error) {
	row := q.db.QueryRow(ctx, getDefaultSMTPConfig)
	var i SmtpConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.SmtpHost,
		&i.SmtpPort,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSMTPConfig = `-- name: GetSMTPConfig :one
SELECT id, name, email, password, smtp_host, smtp_port, is_default, created_at, updated_at
FROM smtp_configs
WHERE id = $1
`

func (q *Queries) GetSMTPConfig(ctx context.Context, id int64) (SmtpConfig, error) {
	row := q.db.QueryRow(ctx, getSMTPConfig, id)
	var i SmtpConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.SmtpHost,
		&i.SmtpPort,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSMTPConfigs = `-- name: ListSMTPConfigs :many
SELECT id, name, email, password, smtp_host, smtp_port, is_default, created_at, updated_at
FROM smtp_configs
ORDER BY created_at DESC
`

func (q *Queries) ListSMTPConfigs(ctx context.Context) ([]SmtpConfig, error) {
	rows, err := q.db.Query(ctx, listSMTPConfigs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SmtpConfig{}
	for rows.Next() {
		var i SmtpConfig
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.SmtpHost,
			&i.SmtpPort,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setAsDefaultSMTPConfig = `-- name: SetAsDefaultSMTPConfig :exec
UPDATE smtp_configs
SET is_default = false
WHERE is_default = true
`

func (q *Queries) SetAsDefaultSMTPConfig(ctx context.Context) error {
	_, err := q.db.Exec(ctx, setAsDefaultSMTPConfig)
	return err
}

const updateSMTPConfig = `-- name: UpdateSMTPConfig :one
UPDATE smtp_configs
SET 
    name = $2,
    email = $3,
    password = $4,
    smtp_host = $5,
    smtp_port = $6,
    is_default = $7,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, email, password, smtp_host, smtp_port, is_default, created_at, updated_at
`

type UpdateSMTPConfigParams struct {
	ID        int64  `json:"id"`
	Name      string `json:"name"`
	Email     string `json:"email"`
	Password  string `json:"password"`
	SmtpHost  string `json:"smtp_host"`
	SmtpPort  string `json:"smtp_port"`
	IsDefault bool   `json:"is_default"`
}

func (q *Queries) UpdateSMTPConfig(ctx context.Context, arg UpdateSMTPConfigParams) (SmtpConfig, error) {
	row := q.db.QueryRow(ctx, updateSMTPConfig,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.SmtpHost,
		arg.SmtpPort,
		arg.IsDefault,
	)
	var i SmtpConfig
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.SmtpHost,
		&i.SmtpPort,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
