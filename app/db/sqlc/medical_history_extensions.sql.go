// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: medical_history_extensions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExamination = `-- name: CreateExamination :one
INSERT INTO examinations (
    medical_history_id,
    exam_date,
    exam_type,
    findings,
    vet_notes,
    doctor_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, medical_history_id, exam_date, exam_type, findings, vet_notes, doctor_id, created_at, updated_at
`

type CreateExaminationParams struct {
	MedicalHistoryID int64            `json:"medical_history_id"`
	ExamDate         pgtype.Timestamp `json:"exam_date"`
	ExamType         string           `json:"exam_type"`
	Findings         string           `json:"findings"`
	VetNotes         pgtype.Text      `json:"vet_notes"`
	DoctorID         int64            `json:"doctor_id"`
}

func (q *Queries) CreateExamination(ctx context.Context, arg CreateExaminationParams) (Examination, error) {
	row := q.db.QueryRow(ctx, createExamination,
		arg.MedicalHistoryID,
		arg.ExamDate,
		arg.ExamType,
		arg.Findings,
		arg.VetNotes,
		arg.DoctorID,
	)
	var i Examination
	err := row.Scan(
		&i.ID,
		&i.MedicalHistoryID,
		&i.ExamDate,
		&i.ExamType,
		&i.Findings,
		&i.VetNotes,
		&i.DoctorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPrescription = `-- name: CreatePrescription :one
INSERT INTO prescriptions (
    medical_history_id,
    examination_id,
    prescription_date,
    doctor_id,
    notes
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, medical_history_id, examination_id, prescription_date, doctor_id, notes, created_at, updated_at
`

type CreatePrescriptionParams struct {
	MedicalHistoryID int64            `json:"medical_history_id"`
	ExaminationID    int64            `json:"examination_id"`
	PrescriptionDate pgtype.Timestamp `json:"prescription_date"`
	DoctorID         int64            `json:"doctor_id"`
	Notes            pgtype.Text      `json:"notes"`
}

func (q *Queries) CreatePrescription(ctx context.Context, arg CreatePrescriptionParams) (Prescription, error) {
	row := q.db.QueryRow(ctx, createPrescription,
		arg.MedicalHistoryID,
		arg.ExaminationID,
		arg.PrescriptionDate,
		arg.DoctorID,
		arg.Notes,
	)
	var i Prescription
	err := row.Scan(
		&i.ID,
		&i.MedicalHistoryID,
		&i.ExaminationID,
		&i.PrescriptionDate,
		&i.DoctorID,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPrescriptionMedication = `-- name: CreatePrescriptionMedication :one
INSERT INTO prescription_medications (
    prescription_id,
    medicine_id,
    dosage,
    frequency,
    duration,
    instructions
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, prescription_id, medicine_id, dosage, frequency, duration, instructions, created_at, updated_at
`

type CreatePrescriptionMedicationParams struct {
	PrescriptionID int64       `json:"prescription_id"`
	MedicineID     int64       `json:"medicine_id"`
	Dosage         string      `json:"dosage"`
	Frequency      string      `json:"frequency"`
	Duration       string      `json:"duration"`
	Instructions   pgtype.Text `json:"instructions"`
}

func (q *Queries) CreatePrescriptionMedication(ctx context.Context, arg CreatePrescriptionMedicationParams) (PrescriptionMedication, error) {
	row := q.db.QueryRow(ctx, createPrescriptionMedication,
		arg.PrescriptionID,
		arg.MedicineID,
		arg.Dosage,
		arg.Frequency,
		arg.Duration,
		arg.Instructions,
	)
	var i PrescriptionMedication
	err := row.Scan(
		&i.ID,
		&i.PrescriptionID,
		&i.MedicineID,
		&i.Dosage,
		&i.Frequency,
		&i.Duration,
		&i.Instructions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTestResult = `-- name: CreateTestResult :one
INSERT INTO test_results (
    medical_history_id,
    examination_id,
    test_type,
    test_date,
    results,
    interpretation,
    file_url,
    doctor_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, medical_history_id, examination_id, test_type, test_date, results, interpretation, file_url, doctor_id, created_at, updated_at
`

type CreateTestResultParams struct {
	MedicalHistoryID int64            `json:"medical_history_id"`
	ExaminationID    int64            `json:"examination_id"`
	TestType         string           `json:"test_type"`
	TestDate         pgtype.Timestamp `json:"test_date"`
	Results          string           `json:"results"`
	Interpretation   pgtype.Text      `json:"interpretation"`
	FileUrl          pgtype.Text      `json:"file_url"`
	DoctorID         int64            `json:"doctor_id"`
}

func (q *Queries) CreateTestResult(ctx context.Context, arg CreateTestResultParams) (TestResult, error) {
	row := q.db.QueryRow(ctx, createTestResult,
		arg.MedicalHistoryID,
		arg.ExaminationID,
		arg.TestType,
		arg.TestDate,
		arg.Results,
		arg.Interpretation,
		arg.FileUrl,
		arg.DoctorID,
	)
	var i TestResult
	err := row.Scan(
		&i.ID,
		&i.MedicalHistoryID,
		&i.ExaminationID,
		&i.TestType,
		&i.TestDate,
		&i.Results,
		&i.Interpretation,
		&i.FileUrl,
		&i.DoctorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExamination = `-- name: DeleteExamination :exec
DELETE FROM examinations
WHERE id = $1
`

func (q *Queries) DeleteExamination(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteExamination, id)
	return err
}

const deletePrescription = `-- name: DeletePrescription :exec
DELETE FROM prescriptions
WHERE id = $1
`

func (q *Queries) DeletePrescription(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePrescription, id)
	return err
}

const deletePrescriptionMedication = `-- name: DeletePrescriptionMedication :exec
DELETE FROM prescription_medications
WHERE id = $1
`

func (q *Queries) DeletePrescriptionMedication(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePrescriptionMedication, id)
	return err
}

const deleteTestResult = `-- name: DeleteTestResult :exec
DELETE FROM test_results
WHERE id = $1
`

func (q *Queries) DeleteTestResult(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTestResult, id)
	return err
}

const getCompleteMedicalHistory = `-- name: GetCompleteMedicalHistory :one
SELECT get_pet_medical_history_summary($1) as medical_history
`

func (q *Queries) GetCompleteMedicalHistory(ctx context.Context, pPetID int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, getCompleteMedicalHistory, pPetID)
	var medical_history []byte
	err := row.Scan(&medical_history)
	return medical_history, err
}

const getExaminationByID = `-- name: GetExaminationByID :one
SELECT id, medical_history_id, exam_date, exam_type, findings, vet_notes, doctor_id, created_at, updated_at FROM examinations
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExaminationByID(ctx context.Context, id int64) (Examination, error) {
	row := q.db.QueryRow(ctx, getExaminationByID, id)
	var i Examination
	err := row.Scan(
		&i.ID,
		&i.MedicalHistoryID,
		&i.ExamDate,
		&i.ExamType,
		&i.Findings,
		&i.VetNotes,
		&i.DoctorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMedicalHistoryById = `-- name: GetMedicalHistoryById :one
SELECT id, medical_record_id, condition, diagnosis_date, notes, created_at, updated_at FROM medical_history
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMedicalHistoryById(ctx context.Context, id int64) (MedicalHistory, error) {
	row := q.db.QueryRow(ctx, getMedicalHistoryById, id)
	var i MedicalHistory
	err := row.Scan(
		&i.ID,
		&i.MedicalRecordID,
		&i.Condition,
		&i.DiagnosisDate,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMedicalRecordById = `-- name: GetMedicalRecordById :one
SELECT id, pet_id, created_at, updated_at FROM medical_records
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMedicalRecordById(ctx context.Context, id int64) (MedicalRecord, error) {
	row := q.db.QueryRow(ctx, getMedicalRecordById, id)
	var i MedicalRecord
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPrescriptionByID = `-- name: GetPrescriptionByID :one
SELECT id, medical_history_id, examination_id, prescription_date, doctor_id, notes, created_at, updated_at FROM prescriptions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPrescriptionByID(ctx context.Context, id int64) (Prescription, error) {
	row := q.db.QueryRow(ctx, getPrescriptionByID, id)
	var i Prescription
	err := row.Scan(
		&i.ID,
		&i.MedicalHistoryID,
		&i.ExaminationID,
		&i.PrescriptionDate,
		&i.DoctorID,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTestResultByID = `-- name: GetTestResultByID :one
SELECT id, medical_history_id, examination_id, test_type, test_date, results, interpretation, file_url, doctor_id, created_at, updated_at FROM test_results
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTestResultByID(ctx context.Context, id int64) (TestResult, error) {
	row := q.db.QueryRow(ctx, getTestResultByID, id)
	var i TestResult
	err := row.Scan(
		&i.ID,
		&i.MedicalHistoryID,
		&i.ExaminationID,
		&i.TestType,
		&i.TestDate,
		&i.Results,
		&i.Interpretation,
		&i.FileUrl,
		&i.DoctorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listExaminationsByMedicalHistory = `-- name: ListExaminationsByMedicalHistory :many
SELECT id, medical_history_id, exam_date, exam_type, findings, vet_notes, doctor_id, created_at, updated_at FROM examinations
WHERE medical_history_id = $1
ORDER BY exam_date DESC
LIMIT $2 OFFSET $3
`

type ListExaminationsByMedicalHistoryParams struct {
	MedicalHistoryID int64 `json:"medical_history_id"`
	Limit            int32 `json:"limit"`
	Offset           int32 `json:"offset"`
}

func (q *Queries) ListExaminationsByMedicalHistory(ctx context.Context, arg ListExaminationsByMedicalHistoryParams) ([]Examination, error) {
	rows, err := q.db.Query(ctx, listExaminationsByMedicalHistory, arg.MedicalHistoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Examination{}
	for rows.Next() {
		var i Examination
		if err := rows.Scan(
			&i.ID,
			&i.MedicalHistoryID,
			&i.ExamDate,
			&i.ExamType,
			&i.Findings,
			&i.VetNotes,
			&i.DoctorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPrescriptionMedications = `-- name: ListPrescriptionMedications :many
SELECT id, prescription_id, medicine_id, dosage, frequency, duration, instructions, created_at, updated_at FROM prescription_medications
WHERE prescription_id = $1
ORDER BY id
`

func (q *Queries) ListPrescriptionMedications(ctx context.Context, prescriptionID int64) ([]PrescriptionMedication, error) {
	rows, err := q.db.Query(ctx, listPrescriptionMedications, prescriptionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PrescriptionMedication{}
	for rows.Next() {
		var i PrescriptionMedication
		if err := rows.Scan(
			&i.ID,
			&i.PrescriptionID,
			&i.MedicineID,
			&i.Dosage,
			&i.Frequency,
			&i.Duration,
			&i.Instructions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPrescriptionsByMedicalHistory = `-- name: ListPrescriptionsByMedicalHistory :many
SELECT id, medical_history_id, examination_id, prescription_date, doctor_id, notes, created_at, updated_at FROM prescriptions
WHERE medical_history_id = $1
ORDER BY prescription_date DESC
LIMIT $2 OFFSET $3
`

type ListPrescriptionsByMedicalHistoryParams struct {
	MedicalHistoryID int64 `json:"medical_history_id"`
	Limit            int32 `json:"limit"`
	Offset           int32 `json:"offset"`
}

func (q *Queries) ListPrescriptionsByMedicalHistory(ctx context.Context, arg ListPrescriptionsByMedicalHistoryParams) ([]Prescription, error) {
	rows, err := q.db.Query(ctx, listPrescriptionsByMedicalHistory, arg.MedicalHistoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Prescription{}
	for rows.Next() {
		var i Prescription
		if err := rows.Scan(
			&i.ID,
			&i.MedicalHistoryID,
			&i.ExaminationID,
			&i.PrescriptionDate,
			&i.DoctorID,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTestResultsByExamination = `-- name: ListTestResultsByExamination :many
SELECT id, medical_history_id, examination_id, test_type, test_date, results, interpretation, file_url, doctor_id, created_at, updated_at FROM test_results
WHERE examination_id = $1
ORDER BY test_date DESC
`

func (q *Queries) ListTestResultsByExamination(ctx context.Context, examinationID int64) ([]TestResult, error) {
	rows, err := q.db.Query(ctx, listTestResultsByExamination, examinationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TestResult{}
	for rows.Next() {
		var i TestResult
		if err := rows.Scan(
			&i.ID,
			&i.MedicalHistoryID,
			&i.ExaminationID,
			&i.TestType,
			&i.TestDate,
			&i.Results,
			&i.Interpretation,
			&i.FileUrl,
			&i.DoctorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTestResultsByMedicalHistory = `-- name: ListTestResultsByMedicalHistory :many
SELECT id, medical_history_id, examination_id, test_type, test_date, results, interpretation, file_url, doctor_id, created_at, updated_at FROM test_results
WHERE medical_history_id = $1
ORDER BY test_date DESC
LIMIT $2 OFFSET $3
`

type ListTestResultsByMedicalHistoryParams struct {
	MedicalHistoryID int64 `json:"medical_history_id"`
	Limit            int32 `json:"limit"`
	Offset           int32 `json:"offset"`
}

func (q *Queries) ListTestResultsByMedicalHistory(ctx context.Context, arg ListTestResultsByMedicalHistoryParams) ([]TestResult, error) {
	rows, err := q.db.Query(ctx, listTestResultsByMedicalHistory, arg.MedicalHistoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TestResult{}
	for rows.Next() {
		var i TestResult
		if err := rows.Scan(
			&i.ID,
			&i.MedicalHistoryID,
			&i.ExaminationID,
			&i.TestType,
			&i.TestDate,
			&i.Results,
			&i.Interpretation,
			&i.FileUrl,
			&i.DoctorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExamination = `-- name: UpdateExamination :one
UPDATE examinations
SET 
    exam_date = $2,
    exam_type = $3,
    findings = $4,
    vet_notes = $5,
    doctor_id = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, medical_history_id, exam_date, exam_type, findings, vet_notes, doctor_id, created_at, updated_at
`

type UpdateExaminationParams struct {
	ID       int64            `json:"id"`
	ExamDate pgtype.Timestamp `json:"exam_date"`
	ExamType string           `json:"exam_type"`
	Findings string           `json:"findings"`
	VetNotes pgtype.Text      `json:"vet_notes"`
	DoctorID int64            `json:"doctor_id"`
}

func (q *Queries) UpdateExamination(ctx context.Context, arg UpdateExaminationParams) (Examination, error) {
	row := q.db.QueryRow(ctx, updateExamination,
		arg.ID,
		arg.ExamDate,
		arg.ExamType,
		arg.Findings,
		arg.VetNotes,
		arg.DoctorID,
	)
	var i Examination
	err := row.Scan(
		&i.ID,
		&i.MedicalHistoryID,
		&i.ExamDate,
		&i.ExamType,
		&i.Findings,
		&i.VetNotes,
		&i.DoctorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePrescription = `-- name: UpdatePrescription :one
UPDATE prescriptions
SET 
    examination_id = $2,
    prescription_date = $3,
    doctor_id = $4,
    notes = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, medical_history_id, examination_id, prescription_date, doctor_id, notes, created_at, updated_at
`

type UpdatePrescriptionParams struct {
	ID               int64            `json:"id"`
	ExaminationID    int64            `json:"examination_id"`
	PrescriptionDate pgtype.Timestamp `json:"prescription_date"`
	DoctorID         int64            `json:"doctor_id"`
	Notes            pgtype.Text      `json:"notes"`
}

func (q *Queries) UpdatePrescription(ctx context.Context, arg UpdatePrescriptionParams) (Prescription, error) {
	row := q.db.QueryRow(ctx, updatePrescription,
		arg.ID,
		arg.ExaminationID,
		arg.PrescriptionDate,
		arg.DoctorID,
		arg.Notes,
	)
	var i Prescription
	err := row.Scan(
		&i.ID,
		&i.MedicalHistoryID,
		&i.ExaminationID,
		&i.PrescriptionDate,
		&i.DoctorID,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePrescriptionMedication = `-- name: UpdatePrescriptionMedication :one
UPDATE prescription_medications
SET 
    medicine_id = $2,
    dosage = $3,
    frequency = $4,
    duration = $5,
    instructions = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, prescription_id, medicine_id, dosage, frequency, duration, instructions, created_at, updated_at
`

type UpdatePrescriptionMedicationParams struct {
	ID           int64       `json:"id"`
	MedicineID   int64       `json:"medicine_id"`
	Dosage       string      `json:"dosage"`
	Frequency    string      `json:"frequency"`
	Duration     string      `json:"duration"`
	Instructions pgtype.Text `json:"instructions"`
}

func (q *Queries) UpdatePrescriptionMedication(ctx context.Context, arg UpdatePrescriptionMedicationParams) (PrescriptionMedication, error) {
	row := q.db.QueryRow(ctx, updatePrescriptionMedication,
		arg.ID,
		arg.MedicineID,
		arg.Dosage,
		arg.Frequency,
		arg.Duration,
		arg.Instructions,
	)
	var i PrescriptionMedication
	err := row.Scan(
		&i.ID,
		&i.PrescriptionID,
		&i.MedicineID,
		&i.Dosage,
		&i.Frequency,
		&i.Duration,
		&i.Instructions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTestResult = `-- name: UpdateTestResult :one
UPDATE test_results
SET 
    test_type = $2,
    test_date = $3,
    results = $4,
    interpretation = $5,
    file_url = $6,
    doctor_id = $7,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, medical_history_id, examination_id, test_type, test_date, results, interpretation, file_url, doctor_id, created_at, updated_at
`

type UpdateTestResultParams struct {
	ID             int64            `json:"id"`
	TestType       string           `json:"test_type"`
	TestDate       pgtype.Timestamp `json:"test_date"`
	Results        string           `json:"results"`
	Interpretation pgtype.Text      `json:"interpretation"`
	FileUrl        pgtype.Text      `json:"file_url"`
	DoctorID       int64            `json:"doctor_id"`
}

func (q *Queries) UpdateTestResult(ctx context.Context, arg UpdateTestResultParams) (TestResult, error) {
	row := q.db.QueryRow(ctx, updateTestResult,
		arg.ID,
		arg.TestType,
		arg.TestDate,
		arg.Results,
		arg.Interpretation,
		arg.FileUrl,
		arg.DoctorID,
	)
	var i TestResult
	err := row.Scan(
		&i.ID,
		&i.MedicalHistoryID,
		&i.ExaminationID,
		&i.TestType,
		&i.TestDate,
		&i.Results,
		&i.Interpretation,
		&i.FileUrl,
		&i.DoctorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
