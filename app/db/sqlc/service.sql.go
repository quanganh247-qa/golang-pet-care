// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: service.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createService = `-- name: CreateService :one
INSERT INTO services (
    name, description, duration, cost, category, notes
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, duration, cost, category, notes, created_at, updated_at
`

type CreateServiceParams struct {
	Name        pgtype.Text   `json:"name"`
	Description pgtype.Text   `json:"description"`
	Duration    pgtype.Int2   `json:"duration"`
	Cost        pgtype.Float8 `json:"cost"`
	Category    pgtype.Text   `json:"category"`
	Notes       pgtype.Text   `json:"notes"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRow(ctx, createService,
		arg.Name,
		arg.Description,
		arg.Duration,
		arg.Cost,
		arg.Category,
		arg.Notes,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Duration,
		&i.Cost,
		&i.Category,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteService = `-- name: DeleteService :exec
UPDATE services
SET removed_at = NOW()
WHERE id = $1 and removed_at is NULL
`

func (q *Queries) DeleteService(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteService, id)
	return err
}

const getServiceByID = `-- name: GetServiceByID :one
SELECT id, name, description, duration, cost, category, notes, created_at, updated_at FROM services
WHERE id = $1 and removed_at is NULL
`

func (q *Queries) GetServiceByID(ctx context.Context, id int64) (Service, error) {
	row := q.db.QueryRow(ctx, getServiceByID, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Duration,
		&i.Cost,
		&i.Category,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getServices = `-- name: GetServices :many
SELECT id, name, description, duration, cost, category, notes, created_at, updated_at FROM services where removed_at is NULL ORDER BY name LIMIT $1 OFFSET $2
`

type GetServicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetServices(ctx context.Context, arg GetServicesParams) ([]Service, error) {
	rows, err := q.db.Query(ctx, getServices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Duration,
			&i.Cost,
			&i.Category,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateService = `-- name: UpdateService :one
UPDATE services
SET 
    name = $2,
    description = $3,
    duration = $4,
    cost = $5,
    category = $6,
    notes = $7,
    updated_at = NOW()
WHERE id = $1 and removed_at is NULL
RETURNING id, name, description, duration, cost, category, notes, created_at, updated_at
`

type UpdateServiceParams struct {
	ID          int64         `json:"id"`
	Name        pgtype.Text   `json:"name"`
	Description pgtype.Text   `json:"description"`
	Duration    pgtype.Int2   `json:"duration"`
	Cost        pgtype.Float8 `json:"cost"`
	Category    pgtype.Text   `json:"category"`
	Notes       pgtype.Text   `json:"notes"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (Service, error) {
	row := q.db.QueryRow(ctx, updateService,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Duration,
		arg.Cost,
		arg.Category,
		arg.Notes,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Duration,
		&i.Cost,
		&i.Category,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
