// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: appoinment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAppointmentsByDateAndTimeSlot = `-- name: CountAppointmentsByDateAndTimeSlot :one
SELECT COUNT(*) 
FROM appointments 
WHERE date = $1 AND doctor_id = $2 AND status = 'completed'
`

type CountAppointmentsByDateAndTimeSlotParams struct {
	Date     pgtype.Timestamp `json:"date"`
	DoctorID pgtype.Int8      `json:"doctor_id"`
}

func (q *Queries) CountAppointmentsByDateAndTimeSlot(ctx context.Context, arg CountAppointmentsByDateAndTimeSlotParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAppointmentsByDateAndTimeSlot, arg.Date, arg.DoctorID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments (petid, username, doctor_id, service_id, date, time_slot_id, state_id)
VALUES ($1, $2, $3, $4, $5, $6, (SELECT id FROM states WHERE state = 'Scheduled'))
RETURNING appointment_id, petid, username, doctor_id, service_id, date, notes, reminder_send, time_slot_id, created_at, state_id
`

type CreateAppointmentParams struct {
	Petid      pgtype.Int8      `json:"petid"`
	Username   pgtype.Text      `json:"username"`
	DoctorID   pgtype.Int8      `json:"doctor_id"`
	ServiceID  pgtype.Int8      `json:"service_id"`
	Date       pgtype.Timestamp `json:"date"`
	TimeSlotID pgtype.Int8      `json:"time_slot_id"`
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, createAppointment,
		arg.Petid,
		arg.Username,
		arg.DoctorID,
		arg.ServiceID,
		arg.Date,
		arg.TimeSlotID,
	)
	var i Appointment
	err := row.Scan(
		&i.AppointmentID,
		&i.Petid,
		&i.Username,
		&i.DoctorID,
		&i.ServiceID,
		&i.Date,
		&i.Notes,
		&i.ReminderSend,
		&i.TimeSlotID,
		&i.CreatedAt,
		&i.StateID,
	)
	return i, err
}

const getAllAppointments = `-- name: GetAllAppointments :many
SELECT 
    a.appointment_id, a.date, a.notes, a.reminder_send, a.created_at,
    p.name AS pet_name,
    d.id AS doctor_id,
    s.name AS service_name,
    ts.start_time, ts.end_time, ts.id AS time_slot_id,
    st.state AS state_name,
    st.id AS state_id
FROM appointments a
LEFT JOIN pets p ON a.petid = p.petid
LEFT JOIN services s ON a.service_id = s.id
LEFT JOIN time_slots ts ON a.time_slot_id = ts.id
LEFT JOIN doctors d ON a.doctor_id = d.id
LEFT JOIN states st ON a.state_id = st.id
`

type GetAllAppointmentsRow struct {
	AppointmentID int64            `json:"appointment_id"`
	Date          pgtype.Timestamp `json:"date"`
	Notes         pgtype.Text      `json:"notes"`
	ReminderSend  pgtype.Bool      `json:"reminder_send"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	PetName       pgtype.Text      `json:"pet_name"`
	DoctorID      pgtype.Int8      `json:"doctor_id"`
	ServiceName   pgtype.Text      `json:"service_name"`
	StartTime     pgtype.Time      `json:"start_time"`
	EndTime       pgtype.Time      `json:"end_time"`
	TimeSlotID    pgtype.Int8      `json:"time_slot_id"`
	StateName     pgtype.Text      `json:"state_name"`
	StateID       pgtype.Int8      `json:"state_id"`
}

func (q *Queries) GetAllAppointments(ctx context.Context) ([]GetAllAppointmentsRow, error) {
	rows, err := q.db.Query(ctx, getAllAppointments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllAppointmentsRow{}
	for rows.Next() {
		var i GetAllAppointmentsRow
		if err := rows.Scan(
			&i.AppointmentID,
			&i.Date,
			&i.Notes,
			&i.ReminderSend,
			&i.CreatedAt,
			&i.PetName,
			&i.DoctorID,
			&i.ServiceName,
			&i.StartTime,
			&i.EndTime,
			&i.TimeSlotID,
			&i.StateName,
			&i.StateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppointmentByStateId = `-- name: GetAppointmentByStateId :many
SELECT appointment_id, petid, username, doctor_id, service_id, date, notes, reminder_send, time_slot_id, created_at, state_id FROM appointments WHERE state_id = $1
`

func (q *Queries) GetAppointmentByStateId(ctx context.Context, stateID pgtype.Int4) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, getAppointmentByStateId, stateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.AppointmentID,
			&i.Petid,
			&i.Username,
			&i.DoctorID,
			&i.ServiceID,
			&i.Date,
			&i.Notes,
			&i.ReminderSend,
			&i.TimeSlotID,
			&i.CreatedAt,
			&i.StateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppointmentDetail = `-- name: GetAppointmentDetail :one
SELECT 
    s.name AS service_name,
    p.name AS pet_name,
    st.state AS state_name
FROM services s, pets p, states st
WHERE s.id = $1 AND p.petid = $2 AND st.id = $3
`

type GetAppointmentDetailParams struct {
	ID    int64 `json:"id"`
	Petid int64 `json:"petid"`
	ID_2  int64 `json:"id_2"`
}

type GetAppointmentDetailRow struct {
	ServiceName pgtype.Text `json:"service_name"`
	PetName     string      `json:"pet_name"`
	StateName   string      `json:"state_name"`
}

func (q *Queries) GetAppointmentDetail(ctx context.Context, arg GetAppointmentDetailParams) (GetAppointmentDetailRow, error) {
	row := q.db.QueryRow(ctx, getAppointmentDetail, arg.ID, arg.Petid, arg.ID_2)
	var i GetAppointmentDetailRow
	err := row.Scan(&i.ServiceName, &i.PetName, &i.StateName)
	return i, err
}

const getAppointmentDetailByAppointmentID = `-- name: GetAppointmentDetailByAppointmentID :one
SELECT 
    a.appointment_id, a.date, a.notes, a.reminder_send, a.created_at,
    d.id AS doctor_id,
    p.name AS pet_name,
    s.name AS service_name,
    ts.start_time, ts.end_time, ts.id AS time_slot_id,
    st.state AS state_name,
    st.id AS state_id
FROM appointments a
LEFT JOIN pets p ON p.petid = a.petid
LEFT JOIN doctors d ON d.id = a.doctor_id
LEFT JOIN services s ON s.id = a.service_id
LEFT JOIN time_slots ts ON ts.id = a.time_slot_id
LEFT JOIN states st ON st.id = a.state_id
WHERE a.appointment_id = $1
`

type GetAppointmentDetailByAppointmentIDRow struct {
	AppointmentID int64            `json:"appointment_id"`
	Date          pgtype.Timestamp `json:"date"`
	Notes         pgtype.Text      `json:"notes"`
	ReminderSend  pgtype.Bool      `json:"reminder_send"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	DoctorID      pgtype.Int8      `json:"doctor_id"`
	PetName       pgtype.Text      `json:"pet_name"`
	ServiceName   pgtype.Text      `json:"service_name"`
	StartTime     pgtype.Time      `json:"start_time"`
	EndTime       pgtype.Time      `json:"end_time"`
	TimeSlotID    pgtype.Int8      `json:"time_slot_id"`
	StateName     pgtype.Text      `json:"state_name"`
	StateID       pgtype.Int8      `json:"state_id"`
}

func (q *Queries) GetAppointmentDetailByAppointmentID(ctx context.Context, appointmentID int64) (GetAppointmentDetailByAppointmentIDRow, error) {
	row := q.db.QueryRow(ctx, getAppointmentDetailByAppointmentID, appointmentID)
	var i GetAppointmentDetailByAppointmentIDRow
	err := row.Scan(
		&i.AppointmentID,
		&i.Date,
		&i.Notes,
		&i.ReminderSend,
		&i.CreatedAt,
		&i.DoctorID,
		&i.PetName,
		&i.ServiceName,
		&i.StartTime,
		&i.EndTime,
		&i.TimeSlotID,
		&i.StateName,
		&i.StateID,
	)
	return i, err
}

const getAppointmentsByDoctor = `-- name: GetAppointmentsByDoctor :many
SELECT 
    a.appointment_id,
    a.date,
    a.created_at,
    a.notes,
    a.reminder_send,
    d.id AS doctor_id,
    p.name AS pet_name,
    s.name AS service_name,
    ts.start_time,
    ts.end_time,
    ts.id AS time_slot_id,
    st.state AS state_name,
    st.id AS state_id
FROM 
    appointments a
LEFT JOIN 
    doctors d ON a.doctor_id = d.id
LEFT JOIN 
    pets p ON a.petid = p.petid
LEFT JOIN 
    services s ON a.service_id = s.id
LEFT JOIN 
    time_slots ts ON a.time_slot_id = ts.id
LEFT JOIN 
    states st ON a.state_id = st.id
WHERE 
    a.doctor_id = $1
ORDER BY a.created_at DESC
`

type GetAppointmentsByDoctorRow struct {
	AppointmentID int64            `json:"appointment_id"`
	Date          pgtype.Timestamp `json:"date"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	Notes         pgtype.Text      `json:"notes"`
	ReminderSend  pgtype.Bool      `json:"reminder_send"`
	DoctorID      pgtype.Int8      `json:"doctor_id"`
	PetName       pgtype.Text      `json:"pet_name"`
	ServiceName   pgtype.Text      `json:"service_name"`
	StartTime     pgtype.Time      `json:"start_time"`
	EndTime       pgtype.Time      `json:"end_time"`
	TimeSlotID    pgtype.Int8      `json:"time_slot_id"`
	StateName     pgtype.Text      `json:"state_name"`
	StateID       pgtype.Int8      `json:"state_id"`
}

func (q *Queries) GetAppointmentsByDoctor(ctx context.Context, doctorID pgtype.Int8) ([]GetAppointmentsByDoctorRow, error) {
	rows, err := q.db.Query(ctx, getAppointmentsByDoctor, doctorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAppointmentsByDoctorRow{}
	for rows.Next() {
		var i GetAppointmentsByDoctorRow
		if err := rows.Scan(
			&i.AppointmentID,
			&i.Date,
			&i.CreatedAt,
			&i.Notes,
			&i.ReminderSend,
			&i.DoctorID,
			&i.PetName,
			&i.ServiceName,
			&i.StartTime,
			&i.EndTime,
			&i.TimeSlotID,
			&i.StateName,
			&i.StateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppointmentsByUser = `-- name: GetAppointmentsByUser :many
SELECT 
    a.appointment_id, a.date, a.created_at,
    p.name AS pet_name,
    d.id AS doctor_id,
    s.name AS service_name,
    ts.start_time, ts.end_time,
    st.state
FROM appointments a
LEFT JOIN pets p ON p.petid = a.petid
LEFT JOIN doctors d ON d.id = a.doctor_id
LEFT JOIN services s ON s.id = a.service_id
LEFT JOIN time_slots ts ON ts.id = a.time_slot_id
LEFT JOIN states st ON st.id = a.state_id
WHERE a.username = $1
`

type GetAppointmentsByUserRow struct {
	AppointmentID int64            `json:"appointment_id"`
	Date          pgtype.Timestamp `json:"date"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	PetName       pgtype.Text      `json:"pet_name"`
	DoctorID      pgtype.Int8      `json:"doctor_id"`
	ServiceName   pgtype.Text      `json:"service_name"`
	StartTime     pgtype.Time      `json:"start_time"`
	EndTime       pgtype.Time      `json:"end_time"`
	State         pgtype.Text      `json:"state"`
}

func (q *Queries) GetAppointmentsByUser(ctx context.Context, username pgtype.Text) ([]GetAppointmentsByUserRow, error) {
	rows, err := q.db.Query(ctx, getAppointmentsByUser, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAppointmentsByUserRow{}
	for rows.Next() {
		var i GetAppointmentsByUserRow
		if err := rows.Scan(
			&i.AppointmentID,
			&i.Date,
			&i.CreatedAt,
			&i.PetName,
			&i.DoctorID,
			&i.ServiceName,
			&i.StartTime,
			&i.EndTime,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppointmentsOfDoctorWithDetails = `-- name: GetAppointmentsOfDoctorWithDetails :many
SELECT 
    a.appointment_id as appointment_id,
    p.name as pet_name,
    s.name as service_name,
    ts.start_time,
    ts.end_time
FROM appointments a
    LEFT JOIN doctors d ON a.doctor_id = d.id
    LEFT JOIN pets p ON a.petid = p.petid
    LEFT JOIN services s ON a.service_id = s.id
    LEFT JOIN time_slots ts ON a.time_slot_id = ts.id
WHERE d.id = $1
AND LOWER(a.status) <> 'completed'
ORDER BY ts.start_time ASC
`

type GetAppointmentsOfDoctorWithDetailsRow struct {
	AppointmentID int64       `json:"appointment_id"`
	PetName       pgtype.Text `json:"pet_name"`
	ServiceName   pgtype.Text `json:"service_name"`
	StartTime     pgtype.Time `json:"start_time"`
	EndTime       pgtype.Time `json:"end_time"`
}

func (q *Queries) GetAppointmentsOfDoctorWithDetails(ctx context.Context, id int64) ([]GetAppointmentsOfDoctorWithDetailsRow, error) {
	rows, err := q.db.Query(ctx, getAppointmentsOfDoctorWithDetails, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAppointmentsOfDoctorWithDetailsRow{}
	for rows.Next() {
		var i GetAppointmentsOfDoctorWithDetailsRow
		if err := rows.Scan(
			&i.AppointmentID,
			&i.PetName,
			&i.ServiceName,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSOAPByAppointmentID = `-- name: GetSOAPByAppointmentID :one
SELECT id, appointment_id, subjective, objective, assessment, plan, created_at FROM consultations WHERE appointment_id = $1
`

func (q *Queries) GetSOAPByAppointmentID(ctx context.Context, appointmentID pgtype.Int8) (Consultation, error) {
	row := q.db.QueryRow(ctx, getSOAPByAppointmentID, appointmentID)
	var i Consultation
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.Subjective,
		&i.Objective,
		&i.Assessment,
		&i.Plan,
		&i.CreatedAt,
	)
	return i, err
}

const listAllAppointments = `-- name: ListAllAppointments :many
SELECT appointment_id, petid, username, doctor_id, service_id, date, notes, reminder_send, time_slot_id, created_at, state_id FROM appointments
`

func (q *Queries) ListAllAppointments(ctx context.Context) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, listAllAppointments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Appointment{}
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.AppointmentID,
			&i.Petid,
			&i.Username,
			&i.DoctorID,
			&i.ServiceID,
			&i.Date,
			&i.Notes,
			&i.ReminderSend,
			&i.TimeSlotID,
			&i.CreatedAt,
			&i.StateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointmentByID = `-- name: UpdateAppointmentByID :exec
UPDATE appointments SET 
    state_id = $2,
    notes = $3,
    reminder_send = $4,
    updated_at = now()
WHERE appointment_id = $1
`

type UpdateAppointmentByIDParams struct {
	AppointmentID int64       `json:"appointment_id"`
	StateID       pgtype.Int4 `json:"state_id"`
	Notes         pgtype.Text `json:"notes"`
	ReminderSend  pgtype.Bool `json:"reminder_send"`
}

func (q *Queries) UpdateAppointmentByID(ctx context.Context, arg UpdateAppointmentByIDParams) error {
	_, err := q.db.Exec(ctx, updateAppointmentByID,
		arg.AppointmentID,
		arg.StateID,
		arg.Notes,
		arg.ReminderSend,
	)
	return err
}

const updateAppointmentStatus = `-- name: UpdateAppointmentStatus :exec
UPDATE appointments
SET state_id = $2
WHERE appointment_id = $1
`

type UpdateAppointmentStatusParams struct {
	AppointmentID int64       `json:"appointment_id"`
	StateID       pgtype.Int4 `json:"state_id"`
}

func (q *Queries) UpdateAppointmentStatus(ctx context.Context, arg UpdateAppointmentStatusParams) error {
	_, err := q.db.Exec(ctx, updateAppointmentStatus, arg.AppointmentID, arg.StateID)
	return err
}

const updateNotification = `-- name: UpdateNotification :exec
UPDATE appointments
SET reminder_send = true
WHERE appointment_id = $1
`

func (q *Queries) UpdateNotification(ctx context.Context, appointmentID int64) error {
	_, err := q.db.Exec(ctx, updateNotification, appointmentID)
	return err
}

const updateTimeSlotBookedPatients = `-- name: UpdateTimeSlotBookedPatients :exec
UPDATE time_slots
SET booked_patients = booked_patients + 1
WHERE id = $1
`

func (q *Queries) UpdateTimeSlotBookedPatients(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateTimeSlotBookedPatients, id)
	return err
}
