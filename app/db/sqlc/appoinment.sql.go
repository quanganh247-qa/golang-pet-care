// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: appoinment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAppointmentsByDateAndTimeSlot = `-- name: CountAppointmentsByDateAndTimeSlot :one
SELECT COUNT(*) 
FROM appointment 
WHERE date = $1 AND doctor_id = $2 AND status = 'completed'
`

type CountAppointmentsByDateAndTimeSlotParams struct {
	Date     pgtype.Timestamp `json:"date"`
	DoctorID pgtype.Int8      `json:"doctor_id"`
}

func (q *Queries) CountAppointmentsByDateAndTimeSlot(ctx context.Context, arg CountAppointmentsByDateAndTimeSlotParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAppointmentsByDateAndTimeSlot, arg.Date, arg.DoctorID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO Appointment
( petid, doctor_id,username, service_id, "date", payment_status, notes, reminder_send, time_slot_id, created_at)
VALUES( 
    $1, $2, $3, $4, $5, $6, $7, $8, $9,now()
) RETURNING appointment_id, petid, username, doctor_id, service_id, date, notes, reminder_send, time_slot_id, payment_status, created_at
`

type CreateAppointmentParams struct {
	Petid         pgtype.Int8      `json:"petid"`
	DoctorID      pgtype.Int8      `json:"doctor_id"`
	Username      pgtype.Text      `json:"username"`
	ServiceID     pgtype.Int8      `json:"service_id"`
	Date          pgtype.Timestamp `json:"date"`
	PaymentStatus pgtype.Text      `json:"payment_status"`
	Notes         pgtype.Text      `json:"notes"`
	ReminderSend  pgtype.Bool      `json:"reminder_send"`
	TimeSlotID    pgtype.Int8      `json:"time_slot_id"`
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, createAppointment,
		arg.Petid,
		arg.DoctorID,
		arg.Username,
		arg.ServiceID,
		arg.Date,
		arg.PaymentStatus,
		arg.Notes,
		arg.ReminderSend,
		arg.TimeSlotID,
	)
	var i Appointment
	err := row.Scan(
		&i.AppointmentID,
		&i.Petid,
		&i.Username,
		&i.DoctorID,
		&i.ServiceID,
		&i.Date,
		&i.Notes,
		&i.ReminderSend,
		&i.TimeSlotID,
		&i.PaymentStatus,
		&i.CreatedAt,
	)
	return i, err
}

const getAppointmentDetailById = `-- name: GetAppointmentDetailById :one
SELECT appointment_id, petid, username, doctor_id, service_id, date, notes, reminder_send, time_slot_id, payment_status, created_at from Appointment WHERE appointment_id = $1
`

func (q *Queries) GetAppointmentDetailById(ctx context.Context, appointmentID int64) (Appointment, error) {
	row := q.db.QueryRow(ctx, getAppointmentDetailById, appointmentID)
	var i Appointment
	err := row.Scan(
		&i.AppointmentID,
		&i.Petid,
		&i.Username,
		&i.DoctorID,
		&i.ServiceID,
		&i.Date,
		&i.Notes,
		&i.ReminderSend,
		&i.TimeSlotID,
		&i.PaymentStatus,
		&i.CreatedAt,
	)
	return i, err
}

const getAppointmentsByDoctor = `-- name: GetAppointmentsByDoctor :many
SELECT 
    a.appointment_id, a.petid, a.username, a.doctor_id, a.service_id, a.date, a.notes, a.reminder_send, a.time_slot_id, a.payment_status, a.created_at,
    d.id AS doctor_id,
    p.name AS pet_name,
    s.name AS service_name,
    ts.start_time,
    ts.end_time
FROM 
    appointment a
JOIN 
    doctors d ON a.doctor_id = d.id
JOIN 
    pet p ON a.petid = p.petid
JOIN 
    services as s ON a.service_id = s.id
JOIN 
    timeslots ts ON a.time_slot_id = ts.id
WHERE 
    a.doctor_id = $1
`

type GetAppointmentsByDoctorRow struct {
	AppointmentID int64            `json:"appointment_id"`
	Petid         pgtype.Int8      `json:"petid"`
	Username      pgtype.Text      `json:"username"`
	DoctorID      pgtype.Int8      `json:"doctor_id"`
	ServiceID     pgtype.Int8      `json:"service_id"`
	Date          pgtype.Timestamp `json:"date"`
	Notes         pgtype.Text      `json:"notes"`
	ReminderSend  pgtype.Bool      `json:"reminder_send"`
	TimeSlotID    pgtype.Int8      `json:"time_slot_id"`
	PaymentStatus pgtype.Text      `json:"payment_status"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	DoctorID_2    int64            `json:"doctor_id_2"`
	PetName       string           `json:"pet_name"`
	ServiceName   pgtype.Text      `json:"service_name"`
	StartTime     pgtype.Time      `json:"start_time"`
	EndTime       pgtype.Time      `json:"end_time"`
}

func (q *Queries) GetAppointmentsByDoctor(ctx context.Context, doctorID pgtype.Int8) ([]GetAppointmentsByDoctorRow, error) {
	rows, err := q.db.Query(ctx, getAppointmentsByDoctor, doctorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAppointmentsByDoctorRow{}
	for rows.Next() {
		var i GetAppointmentsByDoctorRow
		if err := rows.Scan(
			&i.AppointmentID,
			&i.Petid,
			&i.Username,
			&i.DoctorID,
			&i.ServiceID,
			&i.Date,
			&i.Notes,
			&i.ReminderSend,
			&i.TimeSlotID,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.DoctorID_2,
			&i.PetName,
			&i.ServiceName,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppointmentsByUser = `-- name: GetAppointmentsByUser :many
SELECT 
    p.petid, p.name, p.type, p.breed, p.age, p.gender, p.healthnotes, p.weight, p.birth_date, p.username, p.microchip_number, p.last_checkup_date, p.is_active, p.data_image, p.original_image, s.id, s.name, s.description, s.duration, s.cost, s.category, s.notes, s.created_at, s.updated_at, a.appointment_id, a.petid, a.username, a.doctor_id, a.service_id, a.date, a.notes, a.reminder_send, a.time_slot_id, a.payment_status, a.created_at, ts.id, ts.doctor_id, ts.date, ts.start_time, ts.end_time, ts.max_patients, ts.booked_patients, ts.created_at, ts.updated_at
FROM 
    appointment a
JOIN 
    pet p ON a.petid = p.petid 
JOIN 
    services s ON a.service_id = s.id 
JOIN 
    timeslots ts ON a.time_slot_id = ts.id
WHERE 
    a.username = $1 and a.status <> 'completed'
`

type GetAppointmentsByUserRow struct {
	Petid           int64            `json:"petid"`
	Name            string           `json:"name"`
	Type            string           `json:"type"`
	Breed           pgtype.Text      `json:"breed"`
	Age             pgtype.Int4      `json:"age"`
	Gender          pgtype.Text      `json:"gender"`
	Healthnotes     pgtype.Text      `json:"healthnotes"`
	Weight          pgtype.Float8    `json:"weight"`
	BirthDate       pgtype.Date      `json:"birth_date"`
	Username        string           `json:"username"`
	MicrochipNumber pgtype.Text      `json:"microchip_number"`
	LastCheckupDate pgtype.Date      `json:"last_checkup_date"`
	IsActive        pgtype.Bool      `json:"is_active"`
	DataImage       []byte           `json:"data_image"`
	OriginalImage   pgtype.Text      `json:"original_image"`
	ID              int64            `json:"id"`
	Name_2          pgtype.Text      `json:"name_2"`
	Description     pgtype.Text      `json:"description"`
	Duration        pgtype.Int2      `json:"duration"`
	Cost            pgtype.Float8    `json:"cost"`
	Category        pgtype.Text      `json:"category"`
	Notes           pgtype.Text      `json:"notes"`
	CreatedAt       pgtype.Timestamp `json:"created_at"`
	UpdatedAt       pgtype.Timestamp `json:"updated_at"`
	AppointmentID   int64            `json:"appointment_id"`
	Petid_2         pgtype.Int8      `json:"petid_2"`
	Username_2      pgtype.Text      `json:"username_2"`
	DoctorID        pgtype.Int8      `json:"doctor_id"`
	ServiceID       pgtype.Int8      `json:"service_id"`
	Date            pgtype.Timestamp `json:"date"`
	Notes_2         pgtype.Text      `json:"notes_2"`
	ReminderSend    pgtype.Bool      `json:"reminder_send"`
	TimeSlotID      pgtype.Int8      `json:"time_slot_id"`
	PaymentStatus   pgtype.Text      `json:"payment_status"`
	CreatedAt_2     pgtype.Timestamp `json:"created_at_2"`
	ID_2            int64            `json:"id_2"`
	DoctorID_2      int32            `json:"doctor_id_2"`
	Date_2          pgtype.Date      `json:"date_2"`
	StartTime       pgtype.Time      `json:"start_time"`
	EndTime         pgtype.Time      `json:"end_time"`
	MaxPatients     pgtype.Int4      `json:"max_patients"`
	BookedPatients  pgtype.Int4      `json:"booked_patients"`
	CreatedAt_3     pgtype.Timestamp `json:"created_at_3"`
	UpdatedAt_2     pgtype.Timestamp `json:"updated_at_2"`
}

func (q *Queries) GetAppointmentsByUser(ctx context.Context, username pgtype.Text) ([]GetAppointmentsByUserRow, error) {
	rows, err := q.db.Query(ctx, getAppointmentsByUser, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAppointmentsByUserRow{}
	for rows.Next() {
		var i GetAppointmentsByUserRow
		if err := rows.Scan(
			&i.Petid,
			&i.Name,
			&i.Type,
			&i.Breed,
			&i.Age,
			&i.Gender,
			&i.Healthnotes,
			&i.Weight,
			&i.BirthDate,
			&i.Username,
			&i.MicrochipNumber,
			&i.LastCheckupDate,
			&i.IsActive,
			&i.DataImage,
			&i.OriginalImage,
			&i.ID,
			&i.Name_2,
			&i.Description,
			&i.Duration,
			&i.Cost,
			&i.Category,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AppointmentID,
			&i.Petid_2,
			&i.Username_2,
			&i.DoctorID,
			&i.ServiceID,
			&i.Date,
			&i.Notes_2,
			&i.ReminderSend,
			&i.TimeSlotID,
			&i.PaymentStatus,
			&i.CreatedAt_2,
			&i.ID_2,
			&i.DoctorID_2,
			&i.Date_2,
			&i.StartTime,
			&i.EndTime,
			&i.MaxPatients,
			&i.BookedPatients,
			&i.CreatedAt_3,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppointmentsOfDoctorWithDetails = `-- name: GetAppointmentsOfDoctorWithDetails :many
SELECT 
    a.appointment_id as appointment_id,
    p.name as pet_name,
    s.name as service_name,
    ts.start_time,
    ts.end_time
FROM Appointment a
    LEFT JOIN Doctors d ON a.doctor_id = d.id
    LEFT JOIN Pet p ON a.petid = p.petid
    LEFT JOIN services s ON a.service_id = s.id
    LEFT JOIN TimeSlots ts ON a.time_slot_id = ts.id
WHERE d.id = $1
AND LOWER(a.status) <> 'completed'
ORDER BY ts.start_time ASC
`

type GetAppointmentsOfDoctorWithDetailsRow struct {
	AppointmentID int64       `json:"appointment_id"`
	PetName       pgtype.Text `json:"pet_name"`
	ServiceName   pgtype.Text `json:"service_name"`
	StartTime     pgtype.Time `json:"start_time"`
	EndTime       pgtype.Time `json:"end_time"`
}

func (q *Queries) GetAppointmentsOfDoctorWithDetails(ctx context.Context, id int64) ([]GetAppointmentsOfDoctorWithDetailsRow, error) {
	rows, err := q.db.Query(ctx, getAppointmentsOfDoctorWithDetails, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAppointmentsOfDoctorWithDetailsRow{}
	for rows.Next() {
		var i GetAppointmentsOfDoctorWithDetailsRow
		if err := rows.Scan(
			&i.AppointmentID,
			&i.PetName,
			&i.ServiceName,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointmentStatus = `-- name: UpdateAppointmentStatus :exec
UPDATE Appointment
SET payment_status = $2
WHERE appointment_id = $1
`

type UpdateAppointmentStatusParams struct {
	AppointmentID int64       `json:"appointment_id"`
	PaymentStatus pgtype.Text `json:"payment_status"`
}

func (q *Queries) UpdateAppointmentStatus(ctx context.Context, arg UpdateAppointmentStatusParams) error {
	_, err := q.db.Exec(ctx, updateAppointmentStatus, arg.AppointmentID, arg.PaymentStatus)
	return err
}

const updateNotification = `-- name: UpdateNotification :exec
UPDATE Appointment
SET reminder_send = true
WHERE appointment_id = $1
`

func (q *Queries) UpdateNotification(ctx context.Context, appointmentID int64) error {
	_, err := q.db.Exec(ctx, updateNotification, appointmentID)
	return err
}

const updateTimeSlotBookedPatients = `-- name: UpdateTimeSlotBookedPatients :exec
UPDATE timeslots
SET booked_patients = booked_patients + 1
WHERE id = $1 AND  doctor_id = $2
`

type UpdateTimeSlotBookedPatientsParams struct {
	ID       int64 `json:"id"`
	DoctorID int32 `json:"doctor_id"`
}

func (q *Queries) UpdateTimeSlotBookedPatients(ctx context.Context, arg UpdateTimeSlotBookedPatientsParams) error {
	_, err := q.db.Exec(ctx, updateTimeSlotBookedPatients, arg.ID, arg.DoctorID)
	return err
}
