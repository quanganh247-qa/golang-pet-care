// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: soap_note.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSoapNote = `-- name: CreateSoapNote :one
INSERT INTO soap_notes (appointment_id, note) VALUES ($1, $2) RETURNING id, appointment_id, note, created_at, updated_at
`

type CreateSoapNoteParams struct {
	AppointmentID int32  `json:"appointment_id"`
	Note          []byte `json:"note"`
}

func (q *Queries) CreateSoapNote(ctx context.Context, arg CreateSoapNoteParams) (SoapNote, error) {
	row := q.db.QueryRow(ctx, createSoapNote, arg.AppointmentID, arg.Note)
	var i SoapNote
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSoapNote = `-- name: GetSoapNote :one
SELECT id, appointment_id, note, created_at, updated_at FROM soap_notes WHERE appointment_id = $1
`

func (q *Queries) GetSoapNote(ctx context.Context, appointmentID int32) (SoapNote, error) {
	row := q.db.QueryRow(ctx, getSoapNote, appointmentID)
	var i SoapNote
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSoapNote = `-- name: UpdateSoapNote :one
UPDATE soap_notes SET note = $2 WHERE id = $1 RETURNING id, appointment_id, note, created_at, updated_at
`

type UpdateSoapNoteParams struct {
	ID   pgtype.UUID `json:"id"`
	Note []byte      `json:"note"`
}

func (q *Queries) UpdateSoapNote(ctx context.Context, arg UpdateSoapNoteParams) (SoapNote, error) {
	row := q.db.QueryRow(ctx, updateSoapNote, arg.ID, arg.Note)
	var i SoapNote
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
