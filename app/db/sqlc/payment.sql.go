// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: payment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    amount,
    payment_method,
    payment_status,
    order_id,
    test_order_id,
    appointment_id,
    transaction_id,
    payment_details
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, amount, payment_method, payment_status, order_id, test_order_id, transaction_id, payment_details, created_at, updated_at, appointment_id
`

type CreatePaymentParams struct {
	Amount         float64     `json:"amount"`
	PaymentMethod  string      `json:"payment_method"`
	PaymentStatus  string      `json:"payment_status"`
	OrderID        pgtype.Int4 `json:"order_id"`
	TestOrderID    pgtype.Int4 `json:"test_order_id"`
	AppointmentID  pgtype.Int8 `json:"appointment_id"`
	TransactionID  pgtype.Text `json:"transaction_id"`
	PaymentDetails []byte      `json:"payment_details"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.Amount,
		arg.PaymentMethod,
		arg.PaymentStatus,
		arg.OrderID,
		arg.TestOrderID,
		arg.AppointmentID,
		arg.TransactionID,
		arg.PaymentDetails,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.PaymentMethod,
		&i.PaymentStatus,
		&i.OrderID,
		&i.TestOrderID,
		&i.TransactionID,
		&i.PaymentDetails,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AppointmentID,
	)
	return i, err
}

const getAllPayments = `-- name: GetAllPayments :many
SELECT id, amount, payment_method, payment_status, order_id, test_order_id, transaction_id, payment_details, created_at, updated_at, appointment_id FROM payments
ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetAllPaymentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPayments(ctx context.Context, arg GetAllPaymentsParams) ([]Payment, error) {
	rows, err := q.db.Query(ctx, getAllPayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.PaymentMethod,
			&i.PaymentStatus,
			&i.OrderID,
			&i.TestOrderID,
			&i.TransactionID,
			&i.PaymentDetails,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AppointmentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, amount, payment_method, payment_status, order_id, test_order_id, transaction_id, payment_details, created_at, updated_at, appointment_id FROM payments
WHERE id = $1
`

func (q *Queries) GetPaymentByID(ctx context.Context, id int32) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.PaymentMethod,
		&i.PaymentStatus,
		&i.OrderID,
		&i.TestOrderID,
		&i.TransactionID,
		&i.PaymentDetails,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AppointmentID,
	)
	return i, err
}

const getPaymentByOrderID = `-- name: GetPaymentByOrderID :one
SELECT id, amount, payment_method, payment_status, order_id, test_order_id, transaction_id, payment_details, created_at, updated_at, appointment_id FROM payments
WHERE order_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetPaymentByOrderID(ctx context.Context, orderID pgtype.Int4) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByOrderID, orderID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.PaymentMethod,
		&i.PaymentStatus,
		&i.OrderID,
		&i.TestOrderID,
		&i.TransactionID,
		&i.PaymentDetails,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AppointmentID,
	)
	return i, err
}

const getPaymentByTestOrderID = `-- name: GetPaymentByTestOrderID :one
SELECT id, amount, payment_method, payment_status, order_id, test_order_id, transaction_id, payment_details, created_at, updated_at, appointment_id FROM payments
WHERE test_order_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetPaymentByTestOrderID(ctx context.Context, testOrderID pgtype.Int4) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByTestOrderID, testOrderID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.PaymentMethod,
		&i.PaymentStatus,
		&i.OrderID,
		&i.TestOrderID,
		&i.TransactionID,
		&i.PaymentDetails,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AppointmentID,
	)
	return i, err
}

const getRevenueByPaymentMethod = `-- name: GetRevenueByPaymentMethod :many
SELECT 
    payment_method,
    SUM(amount) as total_revenue,
    COUNT(*) as transaction_count
FROM payments
WHERE 
    payment_status = 'completed'
    AND created_at >= $1
    AND created_at <= $2
GROUP BY payment_method
ORDER BY total_revenue DESC
`

type GetRevenueByPaymentMethodParams struct {
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	CreatedAt_2 pgtype.Timestamptz `json:"created_at_2"`
}

type GetRevenueByPaymentMethodRow struct {
	PaymentMethod    string `json:"payment_method"`
	TotalRevenue     int64  `json:"total_revenue"`
	TransactionCount int64  `json:"transaction_count"`
}

func (q *Queries) GetRevenueByPaymentMethod(ctx context.Context, arg GetRevenueByPaymentMethodParams) ([]GetRevenueByPaymentMethodRow, error) {
	rows, err := q.db.Query(ctx, getRevenueByPaymentMethod, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRevenueByPaymentMethodRow{}
	for rows.Next() {
		var i GetRevenueByPaymentMethodRow
		if err := rows.Scan(&i.PaymentMethod, &i.TotalRevenue, &i.TransactionCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRevenueLastSevenDays = `-- name: GetRevenueLastSevenDays :many
SELECT 
    DATE(created_at) as date,
    SUM(amount) as total_revenue
FROM payments
WHERE 
    payment_status = 'completed' 
    AND created_at >= CURRENT_DATE - INTERVAL '7 days'
GROUP BY DATE(created_at)
ORDER BY date DESC
`

type GetRevenueLastSevenDaysRow struct {
	Date         pgtype.Date `json:"date"`
	TotalRevenue int64       `json:"total_revenue"`
}

func (q *Queries) GetRevenueLastSevenDays(ctx context.Context) ([]GetRevenueLastSevenDaysRow, error) {
	rows, err := q.db.Query(ctx, getRevenueLastSevenDays)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRevenueLastSevenDaysRow{}
	for rows.Next() {
		var i GetRevenueLastSevenDaysRow
		if err := rows.Scan(&i.Date, &i.TotalRevenue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payments
SET 
    payment_status = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, amount, payment_method, payment_status, order_id, test_order_id, transaction_id, payment_details, created_at, updated_at, appointment_id
`

type UpdatePaymentStatusParams struct {
	ID            int32  `json:"id"`
	PaymentStatus string `json:"payment_status"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePaymentStatus, arg.ID, arg.PaymentStatus)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.PaymentMethod,
		&i.PaymentStatus,
		&i.OrderID,
		&i.TestOrderID,
		&i.TransactionID,
		&i.PaymentDetails,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AppointmentID,
	)
	return i, err
}
