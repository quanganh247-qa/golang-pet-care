// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: petschedule.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPetSchedule = `-- name: CreatePetSchedule :exec
INSERT INTO pet_schedule (schedule_type, event_time, duration, activity_type, frequency, notes)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreatePetScheduleParams struct {
	ScheduleType string           `json:"schedule_type"`
	EventTime    pgtype.Timestamp `json:"event_time"`
	Duration     pgtype.Interval  `json:"duration"`
	ActivityType pgtype.Text      `json:"activity_type"`
	Frequency    pgtype.Text      `json:"frequency"`
	Notes        pgtype.Text      `json:"notes"`
}

func (q *Queries) CreatePetSchedule(ctx context.Context, arg CreatePetScheduleParams) error {
	_, err := q.db.Exec(ctx, createPetSchedule,
		arg.ScheduleType,
		arg.EventTime,
		arg.Duration,
		arg.ActivityType,
		arg.Frequency,
		arg.Notes,
	)
	return err
}

const getAllSchedulesByPet = `-- name: GetAllSchedulesByPet :many
SELECT id, pet_id, schedule_type, event_time, duration, food_type, quantity, activity_type, frequency, notes, created_at, is_active FROM pet_schedule where pet_id = $1 ORDER BY pet_id LIMIT $1 OFFSET $2
`

type GetAllSchedulesByPetParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllSchedulesByPet(ctx context.Context, arg GetAllSchedulesByPetParams) ([]PetSchedule, error) {
	rows, err := q.db.Query(ctx, getAllSchedulesByPet, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PetSchedule{}
	for rows.Next() {
		var i PetSchedule
		if err := rows.Scan(
			&i.ID,
			&i.PetID,
			&i.ScheduleType,
			&i.EventTime,
			&i.Duration,
			&i.FoodType,
			&i.Quantity,
			&i.ActivityType,
			&i.Frequency,
			&i.Notes,
			&i.CreatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
