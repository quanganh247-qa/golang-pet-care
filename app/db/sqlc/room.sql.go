// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: room.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignRoomToAppointment = `-- name: AssignRoomToAppointment :exec
UPDATE rooms 
SET status = 'occupied',
    current_appointment_id = $1,
    available_at = $2
WHERE id = $3
`

type AssignRoomToAppointmentParams struct {
	CurrentAppointmentID pgtype.Int8      `json:"current_appointment_id"`
	AvailableAt          pgtype.Timestamp `json:"available_at"`
	ID                   int64            `json:"id"`
}

func (q *Queries) AssignRoomToAppointment(ctx context.Context, arg AssignRoomToAppointmentParams) error {
	_, err := q.db.Exec(ctx, assignRoomToAppointment, arg.CurrentAppointmentID, arg.AvailableAt, arg.ID)
	return err
}

const getAvailableRooms = `-- name: GetAvailableRooms :many
SELECT id, name, type, status, current_appointment_id, available_at
FROM rooms
WHERE status = 'available' 
  AND (available_at IS NULL OR available_at <= $1)
ORDER BY id
`

func (q *Queries) GetAvailableRooms(ctx context.Context, availableAt pgtype.Timestamp) ([]Room, error) {
	rows, err := q.db.Query(ctx, getAvailableRooms, availableAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Status,
			&i.CurrentAppointmentID,
			&i.AvailableAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomByID = `-- name: GetRoomByID :one
SELECT id, name, type, status, current_appointment_id, available_at FROM rooms WHERE id = $1
`

func (q *Queries) GetRoomByID(ctx context.Context, id int64) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomByID, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Status,
		&i.CurrentAppointmentID,
		&i.AvailableAt,
	)
	return i, err
}

const releaseRoom = `-- name: ReleaseRoom :exec
UPDATE rooms
SET status = 'available',
    current_appointment_id = NULL,
    available_at = $1
WHERE id = $2
`

type ReleaseRoomParams struct {
	AvailableAt pgtype.Timestamp `json:"available_at"`
	ID          int64            `json:"id"`
}

func (q *Queries) ReleaseRoom(ctx context.Context, arg ReleaseRoomParams) error {
	_, err := q.db.Exec(ctx, releaseRoom, arg.AvailableAt, arg.ID)
	return err
}
