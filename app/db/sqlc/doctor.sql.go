// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: doctor.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDoctorSchedule = `-- name: CreateDoctorSchedule :one
INSERT INTO doctorschedules (
    doctor_id,
    day_of_week,
    shift,
    start_time,
    end_time,
    is_active
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, doctor_id, day_of_week, shift, start_time, end_time, is_active, created_at, updated_at
`

type CreateDoctorScheduleParams struct {
	DoctorID  int32       `json:"doctor_id"`
	DayOfWeek pgtype.Text `json:"day_of_week"`
	Shift     string      `json:"shift"`
	StartTime pgtype.Time `json:"start_time"`
	EndTime   pgtype.Time `json:"end_time"`
	IsActive  pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateDoctorSchedule(ctx context.Context, arg CreateDoctorScheduleParams) (Doctorschedule, error) {
	row := q.db.QueryRow(ctx, createDoctorSchedule,
		arg.DoctorID,
		arg.DayOfWeek,
		arg.Shift,
		arg.StartTime,
		arg.EndTime,
		arg.IsActive,
	)
	var i Doctorschedule
	err := row.Scan(
		&i.ID,
		&i.DoctorID,
		&i.DayOfWeek,
		&i.Shift,
		&i.StartTime,
		&i.EndTime,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDoctorSchedules = `-- name: GetDoctorSchedules :many
SELECT id, doctor_id, day_of_week, shift, start_time, end_time, is_active, created_at, updated_at FROM doctorschedules
WHERE doctor_id = $1 AND is_active = true
`

func (q *Queries) GetDoctorSchedules(ctx context.Context, doctorID int32) ([]Doctorschedule, error) {
	rows, err := q.db.Query(ctx, getDoctorSchedules, doctorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Doctorschedule{}
	for rows.Next() {
		var i Doctorschedule
		if err := rows.Scan(
			&i.ID,
			&i.DoctorID,
			&i.DayOfWeek,
			&i.Shift,
			&i.StartTime,
			&i.EndTime,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDoctorSchedule = `-- name: UpdateDoctorSchedule :one
UPDATE doctorschedules
SET 
    start_time = COALESCE($1, start_time),
    end_time = COALESCE($2, end_time),
    is_active = COALESCE($3, is_active),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $4
RETURNING id, doctor_id, day_of_week, shift, start_time, end_time, is_active, created_at, updated_at
`

type UpdateDoctorScheduleParams struct {
	StartTime pgtype.Time `json:"start_time"`
	EndTime   pgtype.Time `json:"end_time"`
	IsActive  pgtype.Bool `json:"is_active"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateDoctorSchedule(ctx context.Context, arg UpdateDoctorScheduleParams) (Doctorschedule, error) {
	row := q.db.QueryRow(ctx, updateDoctorSchedule,
		arg.StartTime,
		arg.EndTime,
		arg.IsActive,
		arg.ID,
	)
	var i Doctorschedule
	err := row.Scan(
		&i.ID,
		&i.DoctorID,
		&i.DayOfWeek,
		&i.Shift,
		&i.StartTime,
		&i.EndTime,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
