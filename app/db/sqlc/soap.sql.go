// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: soap.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSOAP = `-- name: CreateSOAP :one
INSERT INTO consultations (appointment_id, subjective, objective, assessment, plan)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, appointment_id, subjective, objective, assessment, plan, created_at
`

type CreateSOAPParams struct {
	AppointmentID pgtype.Int8 `json:"appointment_id"`
	Subjective    pgtype.Text `json:"subjective"`
	Objective     pgtype.Text `json:"objective"`
	Assessment    pgtype.Text `json:"assessment"`
<<<<<<< HEAD
	Plan          pgtype.Int8 `json:"plan"`
=======
	Plan          pgtype.Text `json:"plan"`
>>>>>>> e859654 (Elastic search)
}

func (q *Queries) CreateSOAP(ctx context.Context, arg CreateSOAPParams) (Consultation, error) {
	row := q.db.QueryRow(ctx, createSOAP,
		arg.AppointmentID,
		arg.Subjective,
		arg.Objective,
		arg.Assessment,
		arg.Plan,
	)
	var i Consultation
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.Subjective,
		&i.Objective,
		&i.Assessment,
		&i.Plan,
		&i.CreatedAt,
	)
	return i, err
}

<<<<<<< HEAD
const getSOAPByAppointmentID = `-- name: GetSOAPByAppointmentID :one
SELECT id, appointment_id, subjective, objective, assessment, plan, created_at FROM consultations WHERE appointment_id = $1
`

func (q *Queries) GetSOAPByAppointmentID(ctx context.Context, appointmentID pgtype.Int8) (Consultation, error) {
	row := q.db.QueryRow(ctx, getSOAPByAppointmentID, appointmentID)
=======
const getSOAP = `-- name: GetSOAP :one
SELECT id, appointment_id, subjective, objective, assessment, plan, created_at FROM consultations WHERE appointment_id = $1
`

func (q *Queries) GetSOAP(ctx context.Context, appointmentID pgtype.Int8) (Consultation, error) {
	row := q.db.QueryRow(ctx, getSOAP, appointmentID)
>>>>>>> e859654 (Elastic search)
	var i Consultation
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.Subjective,
		&i.Objective,
		&i.Assessment,
		&i.Plan,
		&i.CreatedAt,
	)
	return i, err
}

const updateSOAP = `-- name: UpdateSOAP :one
<<<<<<< HEAD
UPDATE consultations SET subjective = $2, objective = $3, assessment = $4
=======
UPDATE consultations SET subjective = $2, objective = $3, assessment = $4, plan = $5 
>>>>>>> e859654 (Elastic search)
WHERE appointment_id = $1 RETURNING id, appointment_id, subjective, objective, assessment, plan, created_at
`

type UpdateSOAPParams struct {
	AppointmentID pgtype.Int8 `json:"appointment_id"`
	Subjective    pgtype.Text `json:"subjective"`
	Objective     pgtype.Text `json:"objective"`
	Assessment    pgtype.Text `json:"assessment"`
<<<<<<< HEAD
=======
	Plan          pgtype.Text `json:"plan"`
>>>>>>> e859654 (Elastic search)
}

func (q *Queries) UpdateSOAP(ctx context.Context, arg UpdateSOAPParams) (Consultation, error) {
	row := q.db.QueryRow(ctx, updateSOAP,
		arg.AppointmentID,
		arg.Subjective,
		arg.Objective,
		arg.Assessment,
<<<<<<< HEAD
=======
		arg.Plan,
>>>>>>> e859654 (Elastic search)
	)
	var i Consultation
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.Subjective,
		&i.Objective,
		&i.Assessment,
		&i.Plan,
		&i.CreatedAt,
	)
	return i, err
}
