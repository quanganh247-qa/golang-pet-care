// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: diseases.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDiceaseAndMedicinesInfo = `-- name: GetDiceaseAndMedicinesInfo :many
SELECT 
    d.id AS disease_id,
    d.name AS disease_name,
    d.description AS disease_description,
    d.symptoms,
    m.id AS medicine_id,
    m.name AS medicine_name,
    m.usage AS medicine_usage,
    m.dosage,
    m.frequency,
    m.duration,
    m.side_effects
FROM diseases d
LEFT JOIN disease_medicines dm ON d.id = dm.disease_id
LEFT JOIN medicines m ON dm.medicine_id = m.id
WHERE LOWER(d.name) LIKE LOWER($1)
`

type GetDiceaseAndMedicinesInfoRow struct {
	DiseaseID          int64       `json:"disease_id"`
	DiseaseName        string      `json:"disease_name"`
	DiseaseDescription pgtype.Text `json:"disease_description"`
	Symptoms           []byte      `json:"symptoms"`
	MedicineID         pgtype.Int8 `json:"medicine_id"`
	MedicineName       pgtype.Text `json:"medicine_name"`
	MedicineUsage      pgtype.Text `json:"medicine_usage"`
	Dosage             pgtype.Text `json:"dosage"`
	Frequency          pgtype.Text `json:"frequency"`
	Duration           pgtype.Text `json:"duration"`
	SideEffects        pgtype.Text `json:"side_effects"`
}

// 1. Query cơ bản để lấy thông tin bệnh và thuốc điều trị
func (q *Queries) GetDiceaseAndMedicinesInfo(ctx context.Context, lower string) ([]GetDiceaseAndMedicinesInfoRow, error) {
	rows, err := q.db.Query(ctx, getDiceaseAndMedicinesInfo, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiceaseAndMedicinesInfoRow{}
	for rows.Next() {
		var i GetDiceaseAndMedicinesInfoRow
		if err := rows.Scan(
			&i.DiseaseID,
			&i.DiseaseName,
			&i.DiseaseDescription,
			&i.Symptoms,
			&i.MedicineID,
			&i.MedicineName,
			&i.MedicineUsage,
			&i.Dosage,
			&i.Frequency,
			&i.Duration,
			&i.SideEffects,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiseaseTreatmentPlanWithPhases = `-- name: GetDiseaseTreatmentPlanWithPhases :many
SELECT 
    d.name AS disease_name,
    d.description AS disease_description,
    d.symptoms,
    tp.phase_number,
    tp.phase_name,
    tp.description AS phase_description,
    tp.duration AS phase_duration,
    tp.notes AS phase_notes,
    m.name AS medicine_name,
    m.description AS medicine_description,
    COALESCE(pm.dosage, m.dosage) AS dosage,
    COALESCE(pm.frequency, m.frequency) AS frequency,
    COALESCE(pm.duration, m.duration) AS duration,
    m.side_effects,
    pm.notes AS medicine_notes
FROM diseases d
JOIN treatment_phases tp ON d.id = tp.disease_id
JOIN phase_medicines pm ON tp.id = pm.phase_id
JOIN medicines m ON pm.medicine_id = m.id
WHERE LOWER(d.name) LIKE LOWER($1)
ORDER BY tp.phase_number, m.name
`

type GetDiseaseTreatmentPlanWithPhasesRow struct {
	DiseaseName         string      `json:"disease_name"`
	DiseaseDescription  pgtype.Text `json:"disease_description"`
	Symptoms            []byte      `json:"symptoms"`
	PhaseNumber         pgtype.Int4 `json:"phase_number"`
	PhaseName           pgtype.Text `json:"phase_name"`
	PhaseDescription    pgtype.Text `json:"phase_description"`
	PhaseDuration       pgtype.Text `json:"phase_duration"`
	PhaseNotes          pgtype.Text `json:"phase_notes"`
	MedicineName        string      `json:"medicine_name"`
	MedicineDescription pgtype.Text `json:"medicine_description"`
	Dosage              pgtype.Text `json:"dosage"`
	Frequency           pgtype.Text `json:"frequency"`
	Duration            pgtype.Text `json:"duration"`
	SideEffects         pgtype.Text `json:"side_effects"`
	MedicineNotes       pgtype.Text `json:"medicine_notes"`
}

func (q *Queries) GetDiseaseTreatmentPlanWithPhases(ctx context.Context, lower string) ([]GetDiseaseTreatmentPlanWithPhasesRow, error) {
	rows, err := q.db.Query(ctx, getDiseaseTreatmentPlanWithPhases, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiseaseTreatmentPlanWithPhasesRow{}
	for rows.Next() {
		var i GetDiseaseTreatmentPlanWithPhasesRow
		if err := rows.Scan(
			&i.DiseaseName,
			&i.DiseaseDescription,
			&i.Symptoms,
			&i.PhaseNumber,
			&i.PhaseName,
			&i.PhaseDescription,
			&i.PhaseDuration,
			&i.PhaseNotes,
			&i.MedicineName,
			&i.MedicineDescription,
			&i.Dosage,
			&i.Frequency,
			&i.Duration,
			&i.SideEffects,
			&i.MedicineNotes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
