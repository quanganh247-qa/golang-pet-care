// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: diseases.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> e859654 (Elastic search)
const createDisease = `-- name: CreateDisease :one
INSERT INTO diseases (name, description, symptoms, created_at, updated_at) VALUES ($1, $2, $3, now(), now()) RETURNING id, name, description, symptoms, created_at, updated_at
`

type CreateDiseaseParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Symptoms    []byte      `json:"symptoms"`
}

func (q *Queries) CreateDisease(ctx context.Context, arg CreateDiseaseParams) (Disease, error) {
	row := q.db.QueryRow(ctx, createDisease, arg.Name, arg.Description, arg.Symptoms)
	var i Disease
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Symptoms,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

<<<<<<< HEAD
=======
>>>>>>> 6c35562 (dicease and treatment plan)
=======
>>>>>>> e859654 (Elastic search)
=======
>>>>>>> 6c35562 (dicease and treatment plan)
const getDiceaseAndMedicinesInfo = `-- name: GetDiceaseAndMedicinesInfo :many
SELECT 
    d.id AS disease_id,
    d.name AS disease_name,
    d.description AS disease_description,
    d.symptoms,
    m.id AS medicine_id,
    m.name AS medicine_name,
    m.usage AS medicine_usage,
    m.dosage,
    m.frequency,
    m.duration,
    m.side_effects
FROM diseases d
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
LEFT JOIN medicines m ON d.id = m.disease_id
=======
LEFT JOIN disease_medicines dm ON d.id = dm.disease_id
=======
>>>>>>> e859654 (Elastic search)
LEFT JOIN medicines m ON dm.medicine_id = m.id
>>>>>>> 6c35562 (dicease and treatment plan)
=======
LEFT JOIN medicines m ON d.id = m.disease_id
>>>>>>> dc47646 (Optimize SQL query)
=======
LEFT JOIN disease_medicines dm ON d.id = dm.disease_id
LEFT JOIN medicines m ON dm.medicine_id = m.id
>>>>>>> 6c35562 (dicease and treatment plan)
WHERE LOWER(d.name) LIKE LOWER($1)
`

type GetDiceaseAndMedicinesInfoRow struct {
	DiseaseID          int64       `json:"disease_id"`
	DiseaseName        string      `json:"disease_name"`
	DiseaseDescription pgtype.Text `json:"disease_description"`
	Symptoms           []byte      `json:"symptoms"`
	MedicineID         pgtype.Int8 `json:"medicine_id"`
	MedicineName       pgtype.Text `json:"medicine_name"`
	MedicineUsage      pgtype.Text `json:"medicine_usage"`
	Dosage             pgtype.Text `json:"dosage"`
	Frequency          pgtype.Text `json:"frequency"`
	Duration           pgtype.Text `json:"duration"`
	SideEffects        pgtype.Text `json:"side_effects"`
}

// 1. Query cơ bản để lấy thông tin bệnh và thuốc điều trị
func (q *Queries) GetDiceaseAndMedicinesInfo(ctx context.Context, lower string) ([]GetDiceaseAndMedicinesInfoRow, error) {
	rows, err := q.db.Query(ctx, getDiceaseAndMedicinesInfo, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiceaseAndMedicinesInfoRow{}
	for rows.Next() {
		var i GetDiceaseAndMedicinesInfoRow
		if err := rows.Scan(
			&i.DiseaseID,
			&i.DiseaseName,
			&i.DiseaseDescription,
			&i.Symptoms,
			&i.MedicineID,
			&i.MedicineName,
			&i.MedicineUsage,
			&i.Dosage,
			&i.Frequency,
			&i.Duration,
			&i.SideEffects,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 2fe5baf (treatment phase)
const getDiseaseByID = `-- name: GetDiseaseByID :one
SELECT id, name, description, symptoms, created_at, updated_at FROM diseases WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDiseaseByID(ctx context.Context, id int64) (Disease, error) {
	row := q.db.QueryRow(ctx, getDiseaseByID, id)
	var i Disease
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Symptoms,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDiseaseTreatmentPlanWithPhases = `-- name: GetDiseaseTreatmentPlanWithPhases :many
SELECT 
    d.id AS disease_id,
    d.name AS disease_name,
    d.description AS disease_description,
    d.symptoms,
    tp.phase_name,
    tp.description AS phase_description,
    m.id AS medicine_id,
    m.usage AS medicine_usage,
    m.name AS medicine_name,
    m.description AS medicine_description,
    pm.phase_id AS phase_id,
=======
const getDiseaseTreatmentPlanWithPhases = `-- name: GetDiseaseTreatmentPlanWithPhases :many
SELECT 
    d.id AS disease_id,
    d.name AS disease_name,
    d.description AS disease_description,
    d.symptoms,
    tp.phase_name,
    tp.description AS phase_description,
    m.id AS medicine_id,
    m.usage AS medicine_usage,
    m.name AS medicine_name,
    m.description AS medicine_description,
<<<<<<< HEAD
>>>>>>> 6c35562 (dicease and treatment plan)
=======
    pm.phase_id AS phase_id,
>>>>>>> 9ee4f0a (fix bug ratelimit)
=======
const getDiseaseTreatmentPlanWithPhases = `-- name: GetDiseaseTreatmentPlanWithPhases :many
SELECT 
    d.name AS disease_name,
    d.description AS disease_description,
    d.symptoms,
    tp.phase_number,
    tp.phase_name,
    tp.description AS phase_description,
    tp.duration AS phase_duration,
    tp.notes AS phase_notes,
    m.id AS medicine_id,
    m.usage AS medicine_usage,
    m.name AS medicine_name,
    m.description AS medicine_description,
>>>>>>> 6c35562 (dicease and treatment plan)
    COALESCE(pm.dosage, m.dosage) AS dosage,
    COALESCE(pm.frequency, m.frequency) AS frequency,
    COALESCE(pm.duration, m.duration) AS duration,
    m.side_effects,
    pm.notes AS medicine_notes
FROM diseases d
JOIN treatment_phases tp ON d.id = tp.disease_id
JOIN phase_medicines pm ON tp.id = pm.phase_id
JOIN medicines m ON pm.medicine_id = m.id
WHERE LOWER(d.name) LIKE LOWER($1)
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ORDER BY tp.start_date, m.name
`

type GetDiseaseTreatmentPlanWithPhasesRow struct {
	DiseaseID           int64       `json:"disease_id"`
	DiseaseName         string      `json:"disease_name"`
	DiseaseDescription  pgtype.Text `json:"disease_description"`
	Symptoms            []byte      `json:"symptoms"`
	PhaseName           pgtype.Text `json:"phase_name"`
	PhaseDescription    pgtype.Text `json:"phase_description"`
	MedicineID          int64       `json:"medicine_id"`
	MedicineUsage       pgtype.Text `json:"medicine_usage"`
	MedicineName        string      `json:"medicine_name"`
	MedicineDescription pgtype.Text `json:"medicine_description"`
	PhaseID             int64       `json:"phase_id"`
=======
ORDER BY tp.phase_number, m.name
=======
ORDER BY tp.start_date, m.name
>>>>>>> 3bf345d (happy new year)
`

type GetDiseaseTreatmentPlanWithPhasesRow struct {
	DiseaseID           int64       `json:"disease_id"`
	DiseaseName         string      `json:"disease_name"`
	DiseaseDescription  pgtype.Text `json:"disease_description"`
	Symptoms            []byte      `json:"symptoms"`
	PhaseName           pgtype.Text `json:"phase_name"`
	PhaseDescription    pgtype.Text `json:"phase_description"`
	MedicineID          int64       `json:"medicine_id"`
	MedicineUsage       pgtype.Text `json:"medicine_usage"`
	MedicineName        string      `json:"medicine_name"`
	MedicineDescription pgtype.Text `json:"medicine_description"`
<<<<<<< HEAD
>>>>>>> 6c35562 (dicease and treatment plan)
=======
	PhaseID             int64       `json:"phase_id"`
>>>>>>> 9ee4f0a (fix bug ratelimit)
=======
ORDER BY tp.phase_number, m.name
`

type GetDiseaseTreatmentPlanWithPhasesRow struct {
	DiseaseName         string      `json:"disease_name"`
	DiseaseDescription  pgtype.Text `json:"disease_description"`
	Symptoms            []byte      `json:"symptoms"`
	PhaseNumber         pgtype.Int4 `json:"phase_number"`
	PhaseName           pgtype.Text `json:"phase_name"`
	PhaseDescription    pgtype.Text `json:"phase_description"`
	PhaseDuration       pgtype.Text `json:"phase_duration"`
	PhaseNotes          pgtype.Text `json:"phase_notes"`
	MedicineID          int64       `json:"medicine_id"`
	MedicineUsage       pgtype.Text `json:"medicine_usage"`
	MedicineName        string      `json:"medicine_name"`
	MedicineDescription pgtype.Text `json:"medicine_description"`
>>>>>>> 6c35562 (dicease and treatment plan)
	Dosage              pgtype.Text `json:"dosage"`
	Frequency           pgtype.Text `json:"frequency"`
	Duration            pgtype.Text `json:"duration"`
	SideEffects         pgtype.Text `json:"side_effects"`
	MedicineNotes       pgtype.Text `json:"medicine_notes"`
}

func (q *Queries) GetDiseaseTreatmentPlanWithPhases(ctx context.Context, lower string) ([]GetDiseaseTreatmentPlanWithPhasesRow, error) {
	rows, err := q.db.Query(ctx, getDiseaseTreatmentPlanWithPhases, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDiseaseTreatmentPlanWithPhasesRow{}
	for rows.Next() {
		var i GetDiseaseTreatmentPlanWithPhasesRow
		if err := rows.Scan(
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
			&i.DiseaseID,
			&i.DiseaseName,
			&i.DiseaseDescription,
			&i.Symptoms,
<<<<<<< HEAD
			&i.PhaseName,
			&i.PhaseDescription,
			&i.MedicineID,
			&i.MedicineUsage,
			&i.MedicineName,
			&i.MedicineDescription,
			&i.PhaseID,
=======
=======
			&i.DiseaseID,
>>>>>>> 9ee4f0a (fix bug ratelimit)
=======
>>>>>>> 6c35562 (dicease and treatment plan)
			&i.DiseaseName,
			&i.DiseaseDescription,
			&i.Symptoms,
			&i.PhaseNumber,
<<<<<<< HEAD
=======
>>>>>>> 3bf345d (happy new year)
			&i.PhaseName,
			&i.PhaseDescription,
			&i.MedicineID,
			&i.MedicineUsage,
			&i.MedicineName,
			&i.MedicineDescription,
<<<<<<< HEAD
>>>>>>> 6c35562 (dicease and treatment plan)
=======
			&i.PhaseID,
>>>>>>> 9ee4f0a (fix bug ratelimit)
=======
			&i.PhaseName,
			&i.PhaseDescription,
			&i.PhaseDuration,
			&i.PhaseNotes,
			&i.MedicineID,
			&i.MedicineUsage,
			&i.MedicineName,
			&i.MedicineDescription,
>>>>>>> 6c35562 (dicease and treatment plan)
			&i.Dosage,
			&i.Frequency,
			&i.Duration,
			&i.SideEffects,
			&i.MedicineNotes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 6a85052 (get treatment by disease)
=======
>>>>>>> 6a85052 (get treatment by disease)

const getTreatmentByDiseaseId = `-- name: GetTreatmentByDiseaseId :many
SELECT 
    d.id AS disease_id,
    d.name AS disease_name,
    d.description AS disease_description,
    d.symptoms,
    tp.id AS phase_id,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    tp.phase_name AS phase_name,
    tp.description AS phase_description,
    m.id AS medicine_id,
    m.usage AS medicine_usage,
    m.name AS medicine_name,
    m.description AS medicine_description,
    COALESCE(pm.dosage, m.dosage) AS dosage,
    COALESCE(pm.frequency, m.frequency) AS frequency,
    COALESCE(pm.duration, m.duration) AS duration,
    m.side_effects
FROM diseases d
JOIN treatment_phases tp ON d.id = tp.disease_id
JOIN phase_medicines pm ON tp.id = pm.phase_id
JOIN medicines m ON pm.medicine_id = m.id
=======
    tp.phase_number AS phase_number,
=======
>>>>>>> 3bf345d (happy new year)
    tp.phase_name AS phase_name,
    tp.description AS phase_description,
    m.id AS medicine_id,
    m.usage AS medicine_usage,
    m.name AS medicine_name,
    m.description AS medicine_description,
    COALESCE(pm.dosage, m.dosage) AS dosage,
    COALESCE(pm.frequency, m.frequency) AS frequency,
    COALESCE(pm.duration, m.duration) AS duration,
    m.side_effects
FROM diseases d
JOIN treatment_phases tp ON d.id = tp.disease_id
<<<<<<< HEAD
>>>>>>> 6a85052 (get treatment by disease)
=======
JOIN phase_medicines pm ON tp.id = pm.phase_id
JOIN medicines m ON pm.medicine_id = m.id
>>>>>>> 169d7f8 (get treatment by disease)
=======
    tp.phase_number AS phase_number,
    tp.phase_name AS phase_name,
    tp.description AS phase_description,
    tp.duration AS phase_duration,
    tp.notes AS phase_notes
FROM diseases d
JOIN treatment_phases tp ON d.id = tp.disease_id
>>>>>>> 6a85052 (get treatment by disease)
WHERE d.id = $1  LIMIT $2 OFFSET $3
`

type GetTreatmentByDiseaseIdParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetTreatmentByDiseaseIdRow struct {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 169d7f8 (get treatment by disease)
	DiseaseID           int64       `json:"disease_id"`
	DiseaseName         string      `json:"disease_name"`
	DiseaseDescription  pgtype.Text `json:"disease_description"`
	Symptoms            []byte      `json:"symptoms"`
	PhaseID             int64       `json:"phase_id"`
<<<<<<< HEAD
<<<<<<< HEAD
	PhaseName           pgtype.Text `json:"phase_name"`
	PhaseDescription    pgtype.Text `json:"phase_description"`
=======
	PhaseNumber         pgtype.Int4 `json:"phase_number"`
	PhaseName           pgtype.Text `json:"phase_name"`
	PhaseDescription    pgtype.Text `json:"phase_description"`
	PhaseDuration       pgtype.Text `json:"phase_duration"`
	PhaseNotes          pgtype.Text `json:"phase_notes"`
>>>>>>> 169d7f8 (get treatment by disease)
=======
	PhaseName           pgtype.Text `json:"phase_name"`
	PhaseDescription    pgtype.Text `json:"phase_description"`
>>>>>>> 3bf345d (happy new year)
	MedicineID          int64       `json:"medicine_id"`
	MedicineUsage       pgtype.Text `json:"medicine_usage"`
	MedicineName        string      `json:"medicine_name"`
	MedicineDescription pgtype.Text `json:"medicine_description"`
	Dosage              pgtype.Text `json:"dosage"`
	Frequency           pgtype.Text `json:"frequency"`
	Duration            pgtype.Text `json:"duration"`
	SideEffects         pgtype.Text `json:"side_effects"`
<<<<<<< HEAD
=======
=======
>>>>>>> 6a85052 (get treatment by disease)
	DiseaseID          int64       `json:"disease_id"`
	DiseaseName        string      `json:"disease_name"`
	DiseaseDescription pgtype.Text `json:"disease_description"`
	Symptoms           []byte      `json:"symptoms"`
	PhaseID            int64       `json:"phase_id"`
	PhaseNumber        pgtype.Int4 `json:"phase_number"`
	PhaseName          pgtype.Text `json:"phase_name"`
	PhaseDescription   pgtype.Text `json:"phase_description"`
	PhaseDuration      pgtype.Text `json:"phase_duration"`
	PhaseNotes         pgtype.Text `json:"phase_notes"`
<<<<<<< HEAD
>>>>>>> 6a85052 (get treatment by disease)
=======
>>>>>>> 169d7f8 (get treatment by disease)
=======
>>>>>>> 6a85052 (get treatment by disease)
}

func (q *Queries) GetTreatmentByDiseaseId(ctx context.Context, arg GetTreatmentByDiseaseIdParams) ([]GetTreatmentByDiseaseIdRow, error) {
	rows, err := q.db.Query(ctx, getTreatmentByDiseaseId, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTreatmentByDiseaseIdRow{}
	for rows.Next() {
		var i GetTreatmentByDiseaseIdRow
		if err := rows.Scan(
			&i.DiseaseID,
			&i.DiseaseName,
			&i.DiseaseDescription,
			&i.Symptoms,
			&i.PhaseID,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 3bf345d (happy new year)
			&i.PhaseName,
			&i.PhaseDescription,
			&i.MedicineID,
			&i.MedicineUsage,
			&i.MedicineName,
			&i.MedicineDescription,
			&i.Dosage,
			&i.Frequency,
			&i.Duration,
			&i.SideEffects,
=======
=======
>>>>>>> 6a85052 (get treatment by disease)
			&i.PhaseNumber,
			&i.PhaseName,
			&i.PhaseDescription,
			&i.PhaseDuration,
			&i.PhaseNotes,
<<<<<<< HEAD
<<<<<<< HEAD
>>>>>>> 6a85052 (get treatment by disease)
=======
			&i.MedicineID,
			&i.MedicineUsage,
			&i.MedicineName,
			&i.MedicineDescription,
			&i.Dosage,
			&i.Frequency,
			&i.Duration,
			&i.SideEffects,
>>>>>>> 169d7f8 (get treatment by disease)
=======
>>>>>>> 6a85052 (get treatment by disease)
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 6c35562 (dicease and treatment plan)
=======
>>>>>>> 6a85052 (get treatment by disease)
=======
>>>>>>> 6c35562 (dicease and treatment plan)
=======
>>>>>>> 6a85052 (get treatment by disease)
