# name: Release Management & Docker Image Build

# on:
#   push:
#     branches:
#       - 'feature/golang'
#       - 'fix/*'
#   pull_request:
#     types:
#       - closed
#     branches:
#       - 'feature/golang'

# jobs:
#   go-lint:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Go
#         uses: actions/setup-go@v4
#         with:
#           go-version: '1.23'

#   determine-version:
#     runs-on: self-hosted
#     outputs:
#       new_version: ${{ steps.version.outputs.NEW_VERSION }}
#       release_type: ${{ steps.version.outputs.RELEASE_TYPE }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Determine New Version
#         id: version
#         run: |
#           git fetch --tags --force
#           LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
#           IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_TAG#v}"
#           RELEASE_TYPE="patch"
#           if git log $LAST_TAG..HEAD --pretty=%B | grep -q '!:'; then
#             MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0; RELEASE_TYPE="major"
#           elif git log $LAST_TAG..HEAD --pretty=%B | grep -q '^feat:'; then
#             MINOR=$((MINOR + 1)); PATCH=0; RELEASE_TYPE="minor"
#           else
#             PATCH=$((PATCH + 1))
#           fi
#           NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
#           echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"
#           echo "RELEASE_TYPE=$RELEASE_TYPE" >> "$GITHUB_OUTPUT"

#       - name: Debug Version Outputs
#         run: |
#           echo "Determined New Version: ${{ steps.version.outputs.NEW_VERSION }}"
#           echo "Determined Release Type: ${{ steps.version.outputs.RELEASE_TYPE }}"

#   build-docker:
#     needs: determine-version
#     runs-on: ubuntu-latest
#     env:
#       NEW_VERSION: ${{ needs.determine-version.outputs.new_version }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Debug Version Output
#         run: |
#           echo "Building Docker Image with Version: $NEW_VERSION"

#       - name: Update version file
#         run: sed -i "s#v[0-9]*\.[0-9]*\.[0-9]*#v${{ env.NEW_VERSION }}#g" app/api/version.go

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image
#         run: |
#           echo "${{ secrets.TOKEN_GH }}" > github_token.txt
#           REPO_NAME=${{ github.event.repository.name }}
#           IMAGE_NAME="devsds/$REPO_NAME"
#           echo "Building and pushing $IMAGE_NAME:$NEW_VERSION"
#           docker build --secret id=github_token,src=github_token.txt -t $IMAGE_NAME:$NEW_VERSION .
#           docker push $IMAGE_NAME:$NEW_VERSION

#   release:
#     needs: [build-docker, determine-version]
#     runs-on: ubuntu-latest
#     env:
#       NEW_VERSION: ${{ needs.determine-version.outputs.new_version }}
#       RELEASE_TYPE: ${{ needs.determine-version.outputs.release_type }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           fetch-depth: 0

#       - name: Debug Release Variables
#         run: |
#           echo "New Version: $NEW_VERSION"
#           echo "Release Type: $RELEASE_TYPE"

#       - name: Commit Version Update
#         run: |
#           git config --global user.name "github-actions"
#           git config --global user.email "github-actions@github.com"
#           git checkout main
#           git pull origin main
#           git add routes/version.go
#           git commit -am "Update version to $NEW_VERSION" || echo "No changes to commit"
#           git push origin main

#       - name: Create and Push Tag
#         run: |
#           git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
#           git push origin "$NEW_VERSION"

#       # âœ… Step to Zip Specific Folder
#       - name: Zip Specific Folder
#         run: |
#           zip -r chart-${{ env.NEW_VERSION }}.zip charts/

#       - name: Create GitHub Release
#         uses: softprops/action-gh-release@v1
#         with:
#           tag_name: ${{ env.NEW_VERSION }}
#           name: ${{ env.NEW_VERSION }}
#           body: "ðŸš€ Release ${{ env.NEW_VERSION }} | Branch: `${{ github.ref_name }}` | Type: ${{ env.RELEASE_TYPE }}"
#           files: chart-${{ env.NEW_VERSION }}.zip

#   rollback:
#     if: failure()
#     runs-on: ubuntu-latest
#     needs: [release, build-docker, determine-version]
#     env:
#       NEW_VERSION: ${{ needs.determine-version.outputs.new_version }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Install GitHub CLI
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y gh

#       - name: Delete Release, Tag, and Docker Image
#         run: |
#           gh release delete $NEW_VERSION -y || true
#           git tag -d $NEW_VERSION || true
#           git push origin :refs/tags/$NEW_VERSION || true
#           IMAGE_NAME="devsds/${{ github.event.repository.name }}:$NEW_VERSION"
#           docker rmi -f $IMAGE_NAME || true
#           echo "Rollback complete."
