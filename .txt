<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> ada3717 (Docker file)
=======
>>>>>>> ada3717 (Docker file)
1. Thống kê về Lịch hẹn (Appointments)
Số lượng lịch hẹn theo trạng thái (đã xác nhận, chờ xác nhận, đã hoàn thành, đã hủy)
Số lượng lịch hẹn theo ngày/tuần/tháng
Tỷ lệ lịch hẹn được xác nhận/hủy
Thời gian chờ trung bình từ lúc đặt đến lúc được xác nhận
Top các dịch vụ được đặt nhiều nhất
2. Thống kê về Bác sĩ (Doctors)
Số ca khám trung bình mỗi bác sĩ/ngày
Tỷ lệ hoàn thành ca khám của từng bác sĩ
Thời gian khám trung bình của mỗi bác sĩ
Top bác sĩ có nhiều ca khám nhất
Phân bố ca khám theo chuyên môn
3. Thống kê về Bệnh án (Medical Records)
Số lượng bệnh án mới theo thời gian
Phân loại bệnh thường gặp
Tỷ lệ điều trị thành công
Thời gian điều trị trung bình cho mỗi loại bệnh
Số lượng thuốc kê đơn trung bình cho mỗi bệnh án
4. Thống kê về Doanh thu
Doanh thu theo ngày/tuần/tháng
Doanh thu theo từng loại dịch vụ
Doanh thu theo từng bác sĩ
Tỷ lệ thanh toán qua các phương thức khác nhau
Top dịch vụ mang lại doanh thu cao nhất
5. Thống kê về Người dùng (Users/Pets)
Số lượng người dùng mới theo thời gian
Phân bố độ tuổi thú cưng
Tần suất khám định kỳ
Top các giống thú cưng phổ biến
Tỷ lệ quay lại sử dụng dịch vụ
6. Thống kê về Thuốc và Điều trị
Số lượng đơn thuốc được kê theo thời gian
Top các loại thuốc được kê nhiều nhất
Hiệu quả điều trị của các phác đồ
Thời gian điều trị trung bình cho mỗi bệnh
Tỷ lệ tuân thủ phác đồ điều trị



// infrastructure/facade/external_services.go
package facade

import (
	"context"
	"time"

	"github.com/quanganh247-qa/go-blog-be/app/service/minio"
	"github.com/quanganh247-qa/go-blog-be/app/service/redis"
	"github.com/quanganh247-qa/go-blog-be/app/service/elasticsearch"
)

type ExternalServices struct {
	MinioClient   *minio.Client
	RedisClient   *redis.ClientType
	ESClient      *elasticsearch.ESService
	URLExpiryTime time.Duration
<<<<<<< HEAD
<<<<<<< HEAD
}

func NewExternalServices(minioCfg, redisCfg, esCfg interface{}) *ExternalServices {
	// Initialize concrete clients here using your configuration
	return &ExternalServices{
		MinioClient:   minio.GetMinIOClient(), // sample function call
		RedisClient:   redis.Client,           // already initialized via DI or similar
		ESClient:      elasticsearch.NewESService(esCfg.(elasticsearch.Config)), // cast as needed
		URLExpiryTime: 3 * time.Hour,
	}
}

// Example of a simplified method that delegates to multiple subsystems
func (e *ExternalServices) GetPreSignedURL(ctx context.Context, filePath string) (string, error) {
	// Use the minio client and perhaps log via ES client
	return e.MinioClient.GetPresignedURL(ctx, filePath, "defaultFilename", e.URLExpiryTime)
}

HOST=http://localhost:8088
DB_DRIVER=postgres
DB_SOURCE=postgresql://postgres:12345678@localhost:5433/postgres?sslmode=disable
REDIS_ADDRESS=localhost:6379 


HTTP_SERVER_ADDRESS=:8088

SYMMETRIC_KEY=12345678901234567890123456789012
ACCESS_TOKEN_DURATION=168h
REFRESH_TOKEN_DURATION=168h


ACCESS_CONTROL_ALLOW_ORIGIN=http://localhost:3000

DEFAULT_AUTHENTICATION_USERNAME=demo # nếu có set giá trị thì sẽ luôn sử dụng user này để thao tác trên server

API_PREFIX=/api/v1

REGEX_IGNORE_LOGGING=^\/api\/v1\/(monitor\/.*|common\/file.*|swagger\/.*)


COOKIE_SAME_SITE=LAX
COOKIE_SECURE=false
COOKIE_USE_HOST=false


EMAIL_SENDER_NAME=Pet Care System
EMAIL_SENDER_ADDRESS=fsmile3107@gmail.com
EMAIL_SENDER_PASSWORD=jhlwnilsqhwjorde

GOONG_API_KEY=Ow9TkZOml9EpxnLRlTQwYXjb4j1zkzadZHgldqCY
GOONG_BASE_URL=https://rsapi.goong.io
GOONG_API_KEY_MAP=NdgFgJbSkkuHYl0X8Ch7dWfA0efslpN5wOwIU0iA

VIETQR_API_KEY=4fdf03bb-425f-412b-afb4-587dd0dccf04
VIETQR_CLIENT_KEY=1b18876e-1194-4661-a4a4-2c0ac804e444
VIETQR_BASE_URL=https://api.vietqr.io/v2

NATs_URL=nats://localhost:4222

DATABASE_URL=postgresql://postgres.prmzavhkqqthcwdnrkgt:postgres@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres

GOOGLE_API_KEY=AIzaSyCL5I8JcAq2QBkwU9ZsmI5KO8YdtFF2k7A

ELASTICSEARCH_URL=http://localhost:9200

# MinIO
USE_MINIO=true
MINIO_ACCESS_KEY=1View
MINIO_SECRET_KEY=12345678
MINIO_ENDPOINT=localhost:9000
MINIO_SSL=false

# Paypal
PAYPAL_CLIENT_ID=AbXp8X4v72TdP9vmdpCGhAgFHJOauyMkoEFn8TPHViBzknJ0gRbktwPic7aviGx-HHizkuAuPoSZmhQx
PAYPAL_CLIENT_SECRET=EASjz88Szu_mbxzzzVyJNbeawvbUywZrBzjuFmN8G6KZQXSoYO2-XfZGgqxUOo8YstJ3ShfjJE2ki2yr
PAYPAL_ENVIRONMENT=sandbox
PAYPAL_URL=https://api-m.sandbox.paypal.com
=======
=======
>>>>>>> e859654 (Elastic search)
=======
>>>>>>> e859654 (Elastic search)
Các cải tiến để tăng tốc độ hệ thống và trải nghiệm người dùng
Dựa trên codebase đã cung cấp, tôi đề xuất một số cải tiến quan trọng:
1. Tối ưu hóa hiệu suất
Mở rộng sử dụng cache
}
- Đề xuất: Mở rộng cache cho data thường xuyên truy cập như thông tin thú cưng, lịch hẹn, bệnh án
Lợi ích: Giảm thời gian phản hồi và tải database
Tối ưu hóa database queries
id
Đề xuất: Sử dụng indexes cho các cột thường dùng trong JOIN và WHERE
Lợi ích: Tăng tốc độ truy vấn cơ sở dữ liệu
Xử lý bất đồng bộ
Create
- Đề xuất: Sử dụng worker pools và message queue cho các tác vụ nặng
Lợi ích: Tăng khả năng xử lý đồng thời
2. Cải thiện trải nghiệm người dùng
Chuẩn hóa API responses
)
Đề xuất: Chuẩn hóa format response cho tất cả API endpoints
Lợi ích: Frontend dễ xử lý, trải nghiệm nhất quán
Cải thiện validation và error messages
)
Đề xuất: Cung cấp error messages chi tiết hơn và validation phong phú
Lợi ích: Người dùng biết chính xác lỗi để sửa
Thêm tính năng tìm kiếm nâng cao
)
- Đề xuất: Thêm full-text search và bộ lọc phức tạp
Tính năng tìm kiếm nâng cao
- Đề xuất: 
  + Triển khai Elasticsearch hoặc Apache Solr cho full-text search
  + Xây dựng bộ lọc đa tiêu chí (multi-criteria filters)
  + Hỗ trợ tìm kiếm theo:
    * Tên thú cưng
    * Loại dịch vụ
    * Ngày khám
    * Triệu chứng
    * Chẩn đoán
  + Tích hợp gợi ý tìm kiếm (search suggestions)
  + Hỗ trợ sửa lỗi chính tả (spell correction)
Lợi ích:
  - Tăng khả năng tìm kiếm thông tin chính xác
  - Cải thiện UX với kết quả tìm kiếm nhanh và chính xác
  - Giúp nhân viên và bác sĩ truy cập hồ sơ hiệu quả
3. Cải tiến kiến trúc
Rate limiting
)
Đề xuất: Triển khai rate limiting cho tất cả API endpoints
Lợi ích: Bảo vệ hệ thống khỏi quá tải và tấn công
Logging và monitoring
)
- Đề xuất: Triển khai structured logging và hệ thống monitoring
Lợi ích: Dễ debug và phát hiện vấn đề sớm
Mô hình hóa domain rõ ràng hơn
vaccination
- Đề xuất: Tái cấu trúc code theo domain-driven design
Lợi ích: Code dễ bảo trì và mở rộng
4. Tối ưu hóa xử lý media
Xử lý hình ảnh
)
- Đề xuất: Sử dụng CDN hoặc object storage service, thêm xử lý resize theo nhu cầu
Lợi ích: Tải trang nhanh hơn, tiết kiệm băng thông
Lazy loading và progressive images
Đề xuất: Triển khai phương pháp tải hình ảnh hiệu quả
Lợi ích: Tăng tốc độ tải trang cho người dùng
5. Bảo mật và authentication
Cải thiện JWT handling
)
- Đề xuất: Thêm refresh token rotation, token revocation
Lợi ích: Tăng bảo mật cho người dùng
API versioning
Đề xuất: Thêm versioning cho API (v1, v2, etc.)
Lợi ích: Dễ dàng thực hiện thay đổi không gây gián đoạn
<<<<<<< HEAD
<<<<<<< HEAD
Nếu bạn quan tâm đến một phần cụ thể để tối ưu, tôi có thể cung cấp các đề xuất chi tiết hơn
>>>>>>> e859654 (Elastic search)
=======
}
=======
}
>>>>>>> ada3717 (Docker file)

func NewExternalServices(minioCfg, redisCfg, esCfg interface{}) *ExternalServices {
	// Initialize concrete clients here using your configuration
	return &ExternalServices{
		MinioClient:   minio.GetMinIOClient(), // sample function call
		RedisClient:   redis.Client,           // already initialized via DI or similar
		ESClient:      elasticsearch.NewESService(esCfg.(elasticsearch.Config)), // cast as needed
		URLExpiryTime: 3 * time.Hour,
	}
}

// Example of a simplified method that delegates to multiple subsystems
func (e *ExternalServices) GetPreSignedURL(ctx context.Context, filePath string) (string, error) {
	// Use the minio client and perhaps log via ES client
	return e.MinioClient.GetPresignedURL(ctx, filePath, "defaultFilename", e.URLExpiryTime)
}

HOST=http://localhost:8088
DB_DRIVER=postgres
DB_SOURCE=postgresql://postgres:12345678@localhost:5433/postgres?sslmode=disable
REDIS_ADDRESS=localhost:6379 


HTTP_SERVER_ADDRESS=:8088

SYMMETRIC_KEY=12345678901234567890123456789012
ACCESS_TOKEN_DURATION=168h
REFRESH_TOKEN_DURATION=168h


ACCESS_CONTROL_ALLOW_ORIGIN=http://localhost:3000

DEFAULT_AUTHENTICATION_USERNAME=demo # nếu có set giá trị thì sẽ luôn sử dụng user này để thao tác trên server

API_PREFIX=/api/v1

REGEX_IGNORE_LOGGING=^\/api\/v1\/(monitor\/.*|common\/file.*|swagger\/.*)


COOKIE_SAME_SITE=LAX
COOKIE_SECURE=false
COOKIE_USE_HOST=false


EMAIL_SENDER_NAME=Pet Care System
EMAIL_SENDER_ADDRESS=fsmile3107@gmail.com
EMAIL_SENDER_PASSWORD=jhlwnilsqhwjorde

GOONG_API_KEY=Ow9TkZOml9EpxnLRlTQwYXjb4j1zkzadZHgldqCY
GOONG_BASE_URL=https://rsapi.goong.io
GOONG_API_KEY_MAP=NdgFgJbSkkuHYl0X8Ch7dWfA0efslpN5wOwIU0iA

VIETQR_API_KEY=4fdf03bb-425f-412b-afb4-587dd0dccf04
VIETQR_CLIENT_KEY=1b18876e-1194-4661-a4a4-2c0ac804e444
VIETQR_BASE_URL=https://api.vietqr.io/v2

NATs_URL=nats://localhost:4222

DATABASE_URL=postgresql://postgres.prmzavhkqqthcwdnrkgt:postgres@aws-0-ap-southeast-1.pooler.supabase.com:5432/postgres

GOOGLE_API_KEY=AIzaSyCL5I8JcAq2QBkwU9ZsmI5KO8YdtFF2k7A

ELASTICSEARCH_URL=http://localhost:9200

# MinIO
USE_MINIO=true
MINIO_ACCESS_KEY=1View
MINIO_SECRET_KEY=12345678
MINIO_ENDPOINT=localhost:9000
MINIO_SSL=false

# Paypal
PAYPAL_CLIENT_ID=AbXp8X4v72TdP9vmdpCGhAgFHJOauyMkoEFn8TPHViBzknJ0gRbktwPic7aviGx-HHizkuAuPoSZmhQx
PAYPAL_CLIENT_SECRET=EASjz88Szu_mbxzzzVyJNbeawvbUywZrBzjuFmN8G6KZQXSoYO2-XfZGgqxUOo8YstJ3ShfjJE2ki2yr
PAYPAL_ENVIRONMENT=sandbox
<<<<<<< HEAD
PAYPAL_URL=https://api-m.sandbox.paypal.com
>>>>>>> ada3717 (Docker file)
=======
Nếu bạn quan tâm đến một phần cụ thể để tối ưu, tôi có thể cung cấp các đề xuất chi tiết hơn
>>>>>>> e859654 (Elastic search)
=======
PAYPAL_URL=https://api-m.sandbox.paypal.com
>>>>>>> ada3717 (Docker file)
=======
Nếu bạn quan tâm đến một phần cụ thể để tối ưu, tôi có thể cung cấp các đề xuất chi tiết hơn
>>>>>>> e859654 (Elastic search)
